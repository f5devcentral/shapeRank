\usepackage{xcolor}
\usepackage{xspace}
\usepackage{syntax}
\usepackage{calc}
\usepackage{tikz}

\newcommand\keyword[1]{\texttt{\color{blue} #1}\xspace}
\def\comment#1{\textit{#1}}
\def\capt#1{\rmfamily \caption{#1}}
\newcommand\cd[1]{\textsf{#1}}
\def\lt{\tt<}
\def\gt{\tt>}

\newenvironment{dex}[1][!ht] {
%  \begin{verbatim}[#1]
  \def\@programcr{\@addfield\strut}
  \let\\=\@programcr
  \relax\@vobeyspaces\obeylines

  \sffamily
}{b
  %\end{verbatim}
}

\def\grammartable#1{}
\newcommand\bnf[2]{
  \expandafter\newcommand\csname#1\endcsname{
    \setlength{\grammarindent}{\widthof{\synt{#1}} + 3em}
    \begin{grammar}
      <\textbf{#1}> $\rightarrow$ #2
    \end{grammar}
  }
  \edef\grammartable{\grammartable,#1}
}
\newcommand\printgrammartable{
  \foreach \name in \grammartable {
    \csname \name\endcsname
    }
}

\def\lexitable#1{}
\newcommand{\lex}[2]{
  \expandafter\newcommand\csname LEX#1\endcsname{
    \setlength{\grammarindent}{\widthof{\synt{#1}} + 3em}
    \begin{grammar}
      <\textbf{#1}> ::= #2
    \end{grammar}
  }
  \expandafter\newcommand\csname #1\endcsname{\synt{#1}}
  \edef\lexitable{\lexitable,#1}
}
\newcommand\printlexitable{
  \foreach \name in \lexitable {
    \csname LEX\name\endcsname
  }
}


% Lexical Rules

\lex{LINETERMINAL}{
the ASCII LF character, also known as ``newline''
\alt
the ASCII CR character, also known as ``return''
\alt
the ASCII CR character followed by the ASCII LF character
}

\lex{SLCOMMENT}{ {\keyword {//}} any character until the first encountering of \LINETERMINAL{} or \synt{EOF} }

\lex{MLCOMMENT}{ {\keyword {/*}} any character until the first encountering of {\keyword {*/}} }

\lex{WS}{
	 the ASCII SP character, also known as ``space''
\alt the ASCII HT character, also known as ``horizontal tab''
\alt the ASCII FF character, also known as ``form feed''
\alt \LINETERMINAL
\alt \SLCOMMENT
\alt \MLCOMMENT
}

\lex{IDENTSTART}{
{\keyword a} ... {\keyword z}
\alt
{\keyword \_}
}

\lex{TYPESTART}{{\keyword A} ... {\keyword Z}}

\lex{IDENTPART}{
{\keyword A} ... {\keyword Z}
\alt {\keyword a} ... {\keyword z}
\alt {\keyword 0} ... {\keyword 9}
\alt {\keyword \_}	
}

\lex{VALIDENT}{\IDENTSTART{} \IDENTPART*}

\lex{IDENT}{\VALIDENT{} \alt \TYPEIDENT{}}

\lex{TYPEIDENT}{\TYPESTART{} \IDENTPART*}

\lex{TYPEPARAM}{\TYPEIDENT}
\lex{SHAPEPARAM}{\TYPEIDENT}
\lex{DIMPARAM}{\VALIDENT}

\lex{DECIMAL}{{\keyword 0} ... {\keyword 9}}

\lex{HEX}{{\keyword 0} ... {\keyword 9}
\alt {\keyword a} ... {\keyword f}
\alt {\keyword A} ... {\keyword F}
}

\lex{FRAC}{\DECIMAL+}

\lex{EXPO}{({\keyword e} $|$ {\keyword E}) ({\keyword +} $|$ {\keyword -})? \FRAC}

\lex{FLOAT}{
	 \FRAC{} {\keyword .} \FRAC{}? \EXPO{}?
\alt \FRAC{} \EXPO{}?
\alt {\keyword .} \FRAC{} \EXPO{}?
}

\lex{INT}{
     ({\keyword 1} ... {\keyword 9})\FRAC?
\alt {\keyword 0} lookahead $\notin$ {\keyword 0} ... {\keyword 9}
\alt {\keyword 0} ({\keyword x} $|$ {\keyword X}) \HEX+
}

\lex{UNKNOWNDIM}{\QUESTIONMARK}

\lex{ESCAPE}{
	the ASCII SP character, also known as ``space''
\alt
	one of
	{\keyword t}, {\keyword v}, {\keyword r}, {\keyword n}, {\keyword f}, {\keyword b}, {\keyword {$\backslash$}}, {\keyword \textquotesingle}, {\keyword "}
}

\lex{DQCHAR}{
	any one character except {\keyword "}, \LINETERMINAL{} or \keyword{$\backslash$}
\alt
	{\keyword {$\backslash$}} \ESCAPE
}

\lex{DQSTRING}{
	{\keyword "} \DQCHAR* {\keyword "}
}


\lex{SQCHAR}{
	 any one character except {\keyword \textquotesingle}, \LINETERMINAL{} or \keyword{$\backslash$}
\alt {\keyword {$\backslash$}} \ESCAPE
}

\lex{BTCHAR}{
	 any character except {\keyword \textasciigrave}
\alt {\keyword {\textasciigrave\textasciigrave}}
}

\lex{BTSTRING}{
	{\keyword \textasciigrave} \BTCHAR* {\keyword \textasciigrave}
}

\lex{TDQSTRING}{
	{\keyword{"""}} any characters until the first encounter of {\keyword {"""}} {\keyword {"""}}
}

% Token types

\def\PROGRAM{\keyword{program}}
\def\AS{\keyword{as}}
\def\IS{\keyword{is}}
\def\TYPE{\keyword{type}}
\def\FROM{\keyword{from}}
\def\DATA{\keyword{data}}
\def\FUNC{\keyword{func}}
\def\EXTERN{\keyword{extern}}
\def\DEFINE{\keyword{define}}
\def\LET{\keyword{let}}
\def\WHILE{\keyword{while}}
\def\IF{\keyword{if}}
\def\THEN{\keyword{then}}
\def\ELSE{\keyword{else}}
\def\FOR{\keyword{for}}
\def\IN{\keyword{in}}
\def\NEW{\keyword{new}}
\def\THIS{\keyword{this}}
\def\ASSERT{\keyword{assert}}
\def\RETURN{\keyword{return}}
\def\RERANK{\keyword{rerank}}
\def\TO{\keyword{to}}
\def\OF{\keyword{of}}
\def\WHERE{\keyword{where}}
\def\REPORT{\keyword{report}}
\def\DEFAULTS{\keyword{defaults}}
\def\CONTAINS{\keyword{contains}}
\def\MATCHES{\keyword{matches}}
\def\EQ{\keyword{==}}
\def\NEQ{\keyword{!=}}
\def\LT{\keyword{\lt}}
\def\GT{\keyword{\gt}}
\def\LTE{\keyword{\lt=}}
\def\GTE{\keyword{\gt=}}

\def\NUMBER{\keyword{Number}}
\def\NUM{\keyword{Num}}
\def\FLOAT{\keyword{Float}}
\def\INT{\keyword{Int}}
\def\BOOL{\keyword{Bool}}
\def\STRING{\keyword{String}}

\def\SHAPECAST{\keyword{shapeCast}}

\def\PUBLIC{\keyword{public}}
\def\PRIVATE{\keyword{private}}
\def\PROTECTED{\keyword{protected}}
\def\INTERFACE{\keyword{interface}}
\def\CLASS{\keyword{class}}
\def\STATIC{\keyword{static}}
\def\ABSTRACT{\keyword{abstract}}

\def\EXTENDS{\keyword{extends}}
\def\IMPLEMENTS{\keyword{implements}}

\def\OR{\keyword{or}}
\def\AND{\keyword{and}}
\def\NOT{\keyword{not}}

\def\NULL{\keyword{null}}
\def\NULLTYPE{\keyword{Null}}

\def\TRUE{\keyword{true}}
\def\FALSE{\keyword{false}}
\def\IP{\keyword{ip}}
\def\GLOB{\keyword{glob}}
\def\REGEX{\keyword{regex}}

\def\COLON{\keyword{:}}
\def\DOUBLECOLON{\keyword{::}}
\def\BANG{\keyword{!}}
\def\QUESTIONMARK{\keyword{?}}
\def\LPAREN{\keyword{(}}
\def\RPAREN{\keyword{)}}
\def\LBRACK{\keyword{[}}
\def\RBRACK{\keyword{]}}
\def\LCURLY{\keyword{$\{$}}
\def\RCURLY{\keyword{$\}$}}
\def\BIND{\keyword{=}}
\def\COMMA{\keyword{,}}
\def\DOT{\keyword{.}}
\def\RANGE{\keyword{..}}
\def\DOUBLESLASH{\keyword{//}}
\def\PLUS{\keyword{+}}
\def\MINUS{\keyword{-}}
\def\TIMES{\keyword{*}}  
\def\DIV{\keyword{/}}
\def\MOD{\keyword{\%}}
\def\DOLLAR{\keyword{\$}}
\def\SYNC{\keyword{sync}}
\def\ATSIGN{\keyword{@}}

% Grammar Rules

\def\List#1#2{{#2}({#1} {#2})* {#1}?}
\def\ListOp#1#2{(\List{#1}{#2})?}
\def\CommaList#1{\List{\COMMA{}}{#1}}
\def\CommaListOp#1{\ListOp{\COMMA{}}{#1}}
\def\ParamList#1{\LPAREN{} \CommaList{#1}{} \RPAREN}
\def\ParamListOp#1{\LPAREN{} \CommaListOp{#1}{} \RPAREN}

\bnf{Program}{(\SYNC? \PROGRAM{} \synt{ProgramSignature})? \synt{Declaration}? \synt{Expression}}

\bnf {Parameter} {\VALIDENT{} \synt{RankSigSuffix}?}
\bnf {ProgramParameter} {\VALIDENT{} \synt{TypeSigSuffix}}
\bnf {PropertyName} {\VALIDENT{} \alt \synt{StringLiteral}}
\bnf {ParameterList} {\ParamList{\synt{Parameter}}}
\bnf {ProgramParameterList} {\ParamList{\synt{ProgramParameter}}}

%% Declarations
\bnf {Declaration} {
  \PUBLIC{}?
  (\synt{LetBinding}
  \alt \synt{FunctionDeclaration}
  \alt \synt{TypeDeclaration})
}

\bnf {ProgramSignature} {\VALIDENT{} \synt{ProgramParameterList}}
\bnf {FunctionSignature} {\VALIDENT{} \synt{ParameterList}}
\bnf {FunctionDeclaration} {\SYNC? \FUNC{} \synt{FunctionSignature} \BIND \synt{Expression}}
\bnf {LetBinding} {\LET{} \VALIDENT{} \BIND{} \synt{Expression}}
\bnf {TypeDeclaration} {\TYPE{} \TYPEIDENT{} \BIND{} \synt{TypeSig}}
\bnf {TypeSigSuffix} {\COLON{} \synt{TypeSig}}
\bnf {RankSigSuffix} {\COLON{} \synt{RankSig}}

%% Type signatures
\bnf {TypeSig} {
  \synt{ElementType}
  \alt \synt{HyperstreamType}
}

\bnf {RankSig} {
  \ATSIGN \alt \synt{[]+}
}

\bnf{ElementType}{
  \synt{TYPEPARAM}
  \alt \synt{RefType}
  \alt \synt{BuiltinType}
  \alt \synt{StructType}
}

\bnf {BuiltinType} {\BOOL{}  \alt \NUM{} \alt \STRING{}}
\bnf {HyperstreamType} {\synt{Shape}? \synt{ElementType}}
\bnf {PropertySig} {\synt{PropertyName} \COLON \synt{TypeSig}}
\bnf {RefType} {\TYPEIDENT{} }
\bnf {StructType} {\LCURLY{} \CommaListOp{\synt{PropertySig}} \RCURLY{}}
\bnf{Dimension}{\INT{} \alt \DIMPARAM{} \BANG? \alt \synt{Dimension + Dimension} \alt \UNKNOWNDIM}
\bnf{Shape}{\SHAPEPARAM  \BANG? \alt \synt{Shape :: Shape} \alt \synt{[Dimension?]*}}

% Expressions
\bnf {Expression} {\ATSIGN? (\synt{WhereBindingExpression} \alt \synt{ParenthesizedExpression})}
\bnf{ParenthesizedExpression}{\LPAREN{} \synt{Expression} \RPAREN}
\bnf {WhereBindingExpression} {\synt{OrExpression} \alt \synt{WhereBindingExpression} \WHERE{} \VALIDENT{} \BIND{} \synt{OrExpression}}
\bnf {ConditionalExpression} {\IF{} \synt{Expression} \THEN{} \synt{Expression} \ELSE{} \synt{Expression}}
\bnf {OrExpression} {\synt{AndExpression} \alt  \synt{OrExpression} \OR{} \synt{AndExpression}}
\bnf {AndExpression} {\synt{RelExpression} \alt \synt{AndExpression} \AND{} \synt{RelExpression}}
\bnf {RelExpression} {\synt{AdditiveExpression} \alt \synt{RelExpression} \synt{RelOp} \synt{AdditiveExpression}}
\bnf {RelOp} {\EQ{} \alt \NEQ{} \alt \LT{} \alt \GT{} \alt \LTE{} \alt \GTE{} \alt \IN{} \alt \CONTAINS{} \alt \MATCHES{}}
\bnf {AdditiveExpression} {\synt{MultiplicativeExpression} \alt \synt{AdditiveExpression} \synt{AdditiveOp} \synt{MultiplicativeExpression}}
\bnf {AdditiveOp} {\PLUS{} \alt \MINUS{} \alt \RANGE{}}
\bnf {MultiplicativeExpression} {\synt{UnaryExpression} \alt \synt{MultiplicativeExpression} \synt{MultiplicativeOp} \synt{UnaryExpression}}
\bnf {MultiplicativeOp} {\TIMES{} \alt \DIV{} \alt \MOD{}}
\bnf {UnaryExpression} {
       \MINUS{} \synt{MemberExpression}
  \alt \NOT{} \synt{MemberExpression}
  \alt \synt{MemberExpression}
}
\bnf {MemberExpression} {
  \synt{IndexExpression}
  \alt \synt{DotExpression}
  \alt \synt{RerankExpression}
  \alt \synt{ShapeCastExpression}
  \alt \synt{FunctionCall}
  \alt \synt{PrimitiveExpression}
}
\bnf{RerankExpression}{\RERANK{} \synt{IdentifierExpression} \TO{} \INT{} (\COMMA{} \INT{})*}
\bnf{ShapeCastExpression}{\SHAPECAST{} \synt{Expression} \TO{} \synt{Shape}}
\bnf {IndexExpression} {\synt{MemberExpression} \LBRACK{} \synt{Expression} \RBRACK{}}
\bnf {DotExpression} {\synt{MemberExpression} \DOT{} \synt{PropertyName}}
\bnf {FunctionCall} {\synt{MemberExpression} \synt{ArgumentList}}
\bnf {ArgumentList} {\LPAREN{} \CommaListOp {\synt{Expression}} \RPAREN{}}

\bnf {PrimitiveExpression} {
\synt{IdentifierExpression}
  \alt \synt{NumberLiteral}
  \alt \synt{StringLiteral}
  \alt \TRUE{}
  \alt \FALSE{}
  \alt \LPAREN{} \synt{Expression} \RPAREN{}
  \alt \LPAREN{} \synt{Expression} \synt{TypeSigSuffix} \RPAREN{}
  \alt \synt{StructLiteral}
  \alt \synt{EmptyHyperstreamExpr}
  \alt \synt{HyperstreamLiteral}
}
\bnf {IdentifierExpression} {\IDENT}
\bnf {EmptyHyperstreamLiteral} {\LBRACK{} \RBRACK{}}
\bnf {TypedEmptyHyperstreamLiteral} {\LBRACK{} \RBRACK{} \OF{} \synt{TypeSig}}
\bnf {StructLiteral} {\LCURLY{} \CommaListOp{\synt{Property}} \RCURLY{}}
\bnf {Property} {\synt{PropertyName} \COLON{} \synt{Expression}}
\bnf {StringLiteral} {\DQSTRING \alt \BTSTRING \alt \TDQSTRING}
\bnf {NumberLiteral} {\FLOAT \alt \INT}
\bnf {HyperstreamLiteral} {\LBRACK{} \CommaList{\synt{Expression}} \RBRACK{}}
