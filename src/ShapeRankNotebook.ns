Newspeak3
'Root'
class ShapeRankNotebook packageUsing: manifest = (
  |
  private CombinatorialParsing = manifest CombinatorialParsing.
  private CollectionUtils = manifest CollectionUtils.
  private HyperStreams = manifest HyperStreams.        
  private NodeAPI = manifest NodeAPI.
  private Tensorflow = manifest Tensorflow.
  private ShapeRankASTs = manifest ShapeRankASTs.
  private ShapeRankScopes = manifest ShapeRankScopes.
  private ShapeRankInterpreter = manifest ShapeRankStreamInterpreter.
  private ShapeRankTypechecker = manifest ShapeRankTypechecker.
  private ShapeRankConcreteTypechecker = manifest ShapeRankConcreteTypechecker.
  private ShapeRankGrammar = manifest ShapeRankGrammar.
  private ShapeRankParser = manifest ShapeRankParser.
  private ShapeRankWorkspace = manifest ShapeRankWorkspace.
  
  private hopscotchRuntime = manifest HopscotchForHTML5Runtime packageUsing: manifest.  
  |
) (
linearClassificationDemo^ <String> = (
^'func model(params: { W: [$cn][$fn]Float, b: [$cn]Float }, x: [$fn]Float): [$cn]Float
     = softmax(matmul(params.W, x) + params.b)
   let initParams = { W: [[0,0],[0,0],[0,0]], b: [0,0,0] }
   let trainingSet = [
     [ {x: [0.2, 0.8], yp: [0, 1, 0]}, {x: [0.9, 0], yp: [1, 0, 0]} ],
     [ {x: [0.9, 0.9], yp: [0, 0, 1]}, {x: [0.8, 0.6], yp: [1, 0, 0]} ],
     [ {x: [0.4, 0.5], yp: [0, 1, 0]}, {x: [0.5, 0.5], yp: [0, 0, 1]} ],
     [ {x: [0.2, 0.6], yp: [0, 1, 0]}, {x: [0.4, 0.1], yp: [1, 0, 0]} ]
   ]
   func loss(params: { W: [$cn][$fn]Float, b: [$cn]Float },
             data: [$batchSize]{x: [$fn]Float, yp: [$cn]Float}): Float =
     avg(crossEntropyLoss(data.yp, model(params, data.x)))
   func train(params: { W: [$cn][$fn]Float, b: [$cn]Float },
              data: [$batchSize]{ x: [$fn]Float, yp: [$cn]Float }):
             { W: [$cn][$fn]Float, b: [$cn]Float } =
     gradientDescent(0.05, loss, params, data)
   let trainedParams = fold(train, initParams, trainingSet)
   func infer(x: [2]Float): Int = argmax(model(trainedParams, x));
   infer([[0.25, 0.65], [0.2, 0.9], [0.1, 0.1], [0.7, 0]])'
)
public main: platform args: args = (
  |
  utils = CollectionUtils usingPlatform: platform.
  hyperstreams = HyperStreams usingPlatform: platform.
  scopes = (ShapeRankScopes usingPlatform: platform asts: ShapeRankASTs tensorflow: Tensorflow nodeAPI: NodeAPI) Scopes.
  interim_typechecker = (ShapeRankTypechecker  usingPlatform: platform asts: scopes collectionUtils: utils) Typechecker.
  typechecker = (ShapeRankConcreteTypechecker  usingPlatform: platform asts: interim_typechecker collectionUtils: utils streams: hyperstreams) TypeInterpreter.  
  evaluator = (ShapeRankInterpreter usingPlatform: platform asts: typechecker collectionUtils: utils 
                                        streams: hyperstreams) Evaluator.
  parsers = CombinatorialParsing usingPlatform: platform.
  grammar = ShapeRankGrammar usingPlatform: platform parsers: parsers.
  parsing = ShapeRankParser usingPlatform: platform grammar: grammar asts: evaluator collectionUtils: utils.
  hopscotchPlatform = hopscotchRuntime using: platform.  
  workspace = ShapeRankWorkspace usingPlatform: hopscotchPlatform engine: evaluator  parser: parsing code: linearClassificationDemo.
  |
  
  hopscotchPlatform hopscotch HopscotchWindow openSubject: workspace programSubject
)
) : (
)
