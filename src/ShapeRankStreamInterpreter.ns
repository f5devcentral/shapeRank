Newspeak3
'Root'
class ShapeRankStreamInterpreter usingPlatform:
platform asts: asts collectionUtils: utils streams: hs = ( 
(* Interpreter for ShapeRank with stream support.  *)
  | private ASTClass <ShapeRankAST class> = asts.
    private HyperStream <HyperStream class> = hs HyperStream.
    private Iterator = hs Iterator.
    private Map = platform collections Map.
    private List = platform collections List.
    private Utils = utils.
    private ObjectMirror = platform mirrors ObjectMirror.
    | ) (
public class Evaluator usingPlatform: p
<Platform> collectionUtils: c = ASTClass usingPlatform: p
collectionUtils: c ( (* As indicated elsewhere, this class leverages class hierarchy inheritance, extending the AST with interpretation
machinery without compromising modularity.

Runtime values are represented by instances of HyperStream subclasses.  These are produced by evaluation, performed by the #eval methods of various AST nodes. Interpretation uses a call stack, which consists of individual activations. Class #Activation implements this, providing the runtime scope by mapping parameter names to hyperstreams.
*)
  | 
  callStack <List[Activation]> = List new. 
  emptyFrame = Frame dimensions: {} cells: HyperStream empty.
  specialEvaluators <Map[Symbol, [List[ExprAST] | List[HyperStream]]]> = computeSpecialEvaluators.
  public Tensor = TensorFactory new.
  |
) (
class Activation of: f <FunctionAST | ProgramAST> from: argVector <List[Stream]> visit: v <CallVisit> = (
|
  function <FunctionAST | ProgramAST> = f.
  public arguments <List[Stream]> = argVector.
  public callVisit <CallVisit> = v.  
|
) (
public at: k <Symbol> ^ <Stream> = (
  ^at: k ifAbsent: [Error signal: 'Undefined variable ', k]. (* should never happen in a typechecked prgram *)
)
public at: k <Symbol> ifAbsent: blk <[Stream]> ^ <Stream> = (
  1 to: function parameters size do: [:i <Integer> |
  (function parameters at: i) id = k ifTrue: [ | arg |
    arg:: arguments at: i.
    arg isKindOfHyperStream ifFalse: [arg:: scalar: arg].
    ^arg
    ]
  ].
^blk value 
)
) : (
)
public class BlockAST body: e <ExprAST> position: p <{Integer. Integer}> = super BlockAST body: e position: p (
  | private body = e. |
) (
public eval ^ <Tensor> = (
  | homeContext = callStack isEmpty ifTrue: [emptyFrame] ifFalse: [currentActivation]. |
  ^Tensor dimensions: {} contents: {
    Block body: body context: homeContext
  }
)
) : (
public body: e <ExprAST> ^ <Instance> = (
(* sigh, we should find a solution for class method inheritance *)
  ^body: e position: e position
)
)
public class WhereAST expr1: e1 <ExprAST> ident: id <Symbol> expr2: e2 <ExprAST> position: p <{Integer. Integer}> = super WhereAST expr1: e1 ident: id expr2: e2 position: p (
) (
public eval ^ <Tensor> = (
  (* e1 already has ident -> e2 in its scope *)
  ^expr1 eval
)
) : (
)
public class BoolAST value: v <Boolean> position: p <{Integer. Integer}> = super BoolAST value: v position: p (
) (
public eval  ^ <Tensor> = (
  ^ Tensor dimensions: {} contents: {val}
)
) : (
)
public class StringAST value: v <String> position: p <{Integer. Integer}> = super StringAST value: v position: p (
) (
public eval ^<Tensor> = (
  ^Tensor dimensions: {} contents: {val}
)
) : (
)
public class StructLiteralAST data: data <Map[Symbol, ExprAST]> position: p <{Integer. Integer}> = super StructLiteralAST data: data position: p (
) (
public eval ^<Tensor> = (
  ^Tensor dimensions: {} contents: { Record contents: (contents collect: [:v | v eval]) }
)
) : (
)
public class StructDotAST expr: expr <ExprAST> label: label <Symbol> position: p <{Integer. Integer}> = super StructDotAST expr: expr label: label position: p (
) (
public eval ^<Tensor> = (
  ^evalOn: (expr eval)
)
public evalOn: t <HyperStream | Record | ParameterAST> ^<HyperStream> = (
  t isKindOfParameterAST ifTrue: [^evalOn: (currentActivation at: t id)].
  t isKindOfRecord ifTrue: [^t data at: label ifAbsent: [ assert: false. nil]]. (* is this right? *)
  t isKindOfHyperStream ifTrue: [^t map: [:v | evalOn: v]].
  Error signal: 'Could not index non-struct object'.
)
) : (
)
public class CallAST function: f <Symbol> arguments: as <List[ExprAST]> position: p <{Integer. Integer}> =  super CallAST function: f  arguments: as  position: p  (
) (
evaluateArguments = (
   | result = List new: arguments size. |
   1 to: arguments size do: [:i <Integer> | result add: (evaluateArgument: (arguments at: i) for: (callee parameters at: i))].
   ^result
)
evaluateArgument: arg <ExprAST> for: param <ParameterAST> ^ <HyperStream | AST> = (
  ^(param isHOF and: [arg isKindOfBlockAST not]) ifTrue: [
        | ast ::= (scope lookup: arg id ifAbsent:
                     [^(currentActivation at: arg id)]) at: #ast. |
        ast isKindOfParameterAST ifTrue: [^(currentActivation at: ast id)].
        Tensor dimensions: {} contents: {ast}
     ] ifFalse: [arg eval]
)
public eval ^ <Tensor> = (
  ^computeCall: callee arguments: evaluateArguments
)
currentVisit ^ <CallVisit> = (
  ^visits detect: [:v <CallVisit> | v callerVisit = callerVisit] ifNone: [visits first].
)
computeCall: callee <FunctionAST | ProgramAST> arguments: args <List[HyperStream]> ^  <HyperStream> = (
  |  
  thisVisit <CallVisit> = currentVisit.
  (* frame *)
  argFrames <List[Frame]> = frameArguments: args of: callee.
  (* replicate & zip *)
  zippedFrame <Frame[List[HyperStream]]> = argFrames reduce: [:f1 <Frame[T def]> :f2 <Frame[S def]> |
  (* If we set reactivity per formal, we should test formals, not callee; if not, we should hoist test out *)
    callee isSynchronous ifTrue: [f1 synchronouslyFuse: f2] ifFalse: [f1 reactivelyFuse: f2]
    ] ifEmpty: [emptyFrame].
  (* map *)    
  resultFrame <Frame> = zippedFrame map: [:argVector <List[HyperStream]> | 
   | result  <HyperStream> | 
   pushActivation:  (Activation of: callee from: argVector visit: thisVisit ).
   result:: callee body eval.
   popActivation.
   result.
  ] withRangeOfDimensions:  thisVisit type dimensions.
  | 
  ^resultFrame asStream.  
)
resolveParameterToFunction: ast <ParameterAST> ^ <FunctionAST> = (
  | v <AST> = currentActivation at: ast id. | 
  v isKindOfFunctionAST ifTrue: [^v].
  Error signal: 'Parameter ', ast id, ' is called as a function but is not of function type'
)
) : (
)
class Frame dimensions: ds <List[Integer]> cells: cs <HyperStream[Cell[T def]]> = (
(* A Frame is a hyperstream of cells. The shape of the hyperstream is given by #dimensions.
The cells themselves are provided as a hyperstream.
*)
|
  public dimensions  <List[Integer | UnboundedDimension]> = ds.
  public cells <HyperStream[Cell[T]]> = cs.
|
assert: [cs isKindOfHyperStream] message: 'Unexpected cells argument'.
) (
public hasRank ^ <Boolean> = (
   ^true
)
public printString = (
  ^'Frame of rank: ', rank printString
)
public rank ^ <Integer> = (
  ^dimensions size
)
public size = (
  ^dimensions reduce: [:d1 <Integer> :d2 <Integer> | d1 * d2] ifEmpty: [1]
)
public map: f <[T | X def]> ^ <Frame[X]> = (
  ^Frame 
        dimensions: dimensions 
        cells: (cells map: [:c <Cell[T]> | Cell for: (f value: c contents)])
)
public asStream ^ <HyperStream[T]> = (
  ^cells map: [:c <Cell[T]> | c contents size = 1 ifTrue:  [c contents first] ifFalse: [c contents] ]
)
public reactivelyFuse: f <Frame[S def]> ^ <Frame[T | S]> = (
  | 
  prefix <List[Integer | UnboundedDimension]> = dimensions size > f dimensions size ifTrue: [
    fuseDims: (dimensions copyFrom: 1 to:  f dimensions size) with: f dimensions.
    ] ifFalse: [fuseDims: (f dimensions copyFrom: 1 to:  dimensions size) with: dimensions.]. 
    suffix = dimensions size > f dimensions size ifTrue: [
      dimensions copyFrom: f dimensions size + 1 to: dimensions size
      ] ifFalse: [f dimensions copyFrom: dimensions size + 1 to: f dimensions size].
  |
     (* fuse *)
     ^Frame dimensions: prefix, suffix cells: (reactivelyFuse: cells with: f cells)
)
public synchronouslyFuse: f <Frame[S def]> ^ <Frame[T | S]> = (
  | 
  prefix <List[Integer | UnboundedDimension]> = dimensions size > f dimensions size ifTrue: [
    fuseDims: (dimensions copyFrom: 1 to:  f dimensions size) with: f dimensions.
    ] ifFalse: [fuseDims: (f dimensions copyFrom: 1 to:  dimensions size) with: dimensions.]. 
    suffix = dimensions size > f dimensions size ifTrue: [
      dimensions copyFrom: f dimensions size + 1 to: dimensions size
      ] ifFalse: [f dimensions copyFrom: dimensions size + 1 to: f dimensions size].    
    |
     (* fuse *)
     ^Frame dimensions: prefix, suffix cells: (synchronouslyFuse: cells with: f cells) 
)
public map: f <[:T | R]> withRangeOfDimensions: ds <List[Integer | UnboundedDimension]>  ^ <HyperStream[R]> = (
  ^Frame 
        dimensions: ds 
        cells: (cells map: [:c <Cell[T]> | Cell for: (f value: c contents)] withRangeOfDimensions: ds)
)
) : (
)
public class IdentifierAST named: n <String> position: p <{Integer. Integer}> = super IdentifierAST named: n  position: p  (
) (
computeBinding  ^ <Tensor> = (
   callStack isEmpty ifFalse: [^currentActivation at: id ifAbsent: [evalFromScope: id]].
  ^evalFromScope: id.
)
public eval  ^ <Tensor> = (
   callStack isEmpty ifFalse: [^currentActivation at: id ifAbsent: [evalFromScope: id]].
  ^evalFromScope: id.
)
evalFromScope:  n <Symbol> ^ <ExprAST> = (
  | decl = (scope lookup: id) at: #ast. |
  decl isKindOfLetAST ifTrue: [^decl expression eval].
  decl isKindOfExprAST ifTrue: [^decl eval].
  decl isKindOfFunctionAST ifTrue: [Error signal: 'Higher order functions not supported'].
 ^decl
)
) : (
)
public class NumAST value: n <Integer> position: p <{Integer. Integer}> = super NumAST value: n position: p () (
public eval  ^ <Tensor> = (
  ^ Tensor dimensions: {} contents: {val}
)
) : (
)
class PrimitiveBodyAST block: blk <Block> = super PrimitiveBodyAST block: blk (
) (
public eval ^ <Tensor> = (
  ^block valueWithArguments: currentActivation arguments asArray
)
) : (
)
public class ProgramAST header: hdr <ProgramHeaderAST> declarations: ds <List[FunctionAST]> expression: e <ExprAST> position: p <{Integer. Integer}> = 
  super ProgramAST header: hdr declarations: ds expression: e position: p (
) (
public eval ^ <Tensor> = (
  computeType.
  ^expression eval.
)
public evaluateWithArguments: args <List[HyperStream]> ^ <HyperStream> = (
(* 
We treat the invocation of a program like a function invocation.
*)
  computeTypeWithArguments: args.
  ^computeCall: self arguments: args
)
computeCall: callee <FunctionAST | ProgramAST> arguments: args <List[HyperStream]> ^  <HyperStream> = (
  |  
  (* frame *)
  argFrames <List[Frame]> = frameArguments: args of: callee.
  (* replicate & zip *)
  zippedFrame <Frame[List[HyperStream]]> = argFrames reduce: [:f1 <Frame[T def]> :f2 <Frame[S def]> |
  (* If we set reactivity per formal, we should test formals, not callee; if not, we should hoist test out *)
    callee isSynchronous ifTrue: [f1 synchronouslyFuse: f2] ifFalse: [f1 reactivelyFuse: f2]
    ] ifEmpty: [emptyFrame].
  (* map *)    
  resultFrame <Frame> = zippedFrame map: [:argVector <List[HyperStream]> | 
   | result  <HyperStream> | 
   pushActivation:  (Activation of: callee from: argVector visit: callee visits first).
   result:: callee body eval.
   popActivation.
   result.
  ] withRangeOfDimensions:  callee visits first type dimensions.
  | 
  ^resultFrame asStream.  
)
) : (
)
public class RerankAST  reranking: fn <String> to: rs <List[Integer]> position: p <{Integer. Integer}>  = 
  super RerankAST reranking: fn to: rs  position: p (
) (
public eval  ^ <Tensor> = (
  ^etaExpansion
)
) : (
)
public class ShapeCastAST expression: e <ExprAST> to: s <ShapeAST> position: p <{Integer. Integer}> = 
  super ShapeCastAST expression: e to: s position: p (
) (
public eval  ^ <Tensor> = (
  | result <Tensor> = expression eval. |
  (ensure: result conformsTo: shape) ifFalse: [Error signal: 'Runtime type error: cast failed'].
  ^result
)
ensure: t <Tensor>  conformsTo: s <ShapeAST> ^ <Boolean> = (
  ^shape = (shapeOf: t)
)
shapeOf: t <HyperStream> ^ <ShapeVectorAST> = (
 | 
 dims  = t dimensions collect: [:d <Integer | UnboundedDimension> | 
    d isKindOfInteger ifTrue: [DimensionNumberAST number: d position: {0. 0}] ifFalse: [UnknownDimensionAST new]
    ]. 
  |
  ^ShapeVectorAST dimensions: dims position: {0. 0}
)
) : (
)
class Record contents: data <Map[Symbol, Tensor]> = (
  | public data <Map[Symbol, Tensor]> = data. |
) (
public isKindOfRecord = (
  ^true
)
public = other <Object> ^<Boolean> = (
  other isKindOfRecord ifFalse: [^false].
  ^(Utils maps: data eq: other data)
)
public hash ^<Integer> = (
  ^(Utils valueMapHashOf: data)
)
public printString ^<String> = (
  | ret ::= '{ '.
    first ::= true. |
  data keysAndValuesDo: [:k :v |
    first ifTrue: [first:: false] ifFalse: [ret:: ret, ', '].
    ret:: ret, ' ', k, ': ', v printString.
  ].
  ret:: ret, ' }'.
  ^ret
)
) : (
)
public class Block body: e <ExprAST> context: c <Activation> = (
  | public body = e.
    private ctx = c. |
) (
public hasRank ^ <Boolean> = (
   ^true
)
public rank ^ <Integer> = (
  ^0
)
public evalBody ^<Tensor> = (
  | result <Tensor> |
  pushActivation: ctx.
  result:: body eval.
  popActivation.
  ^result
)
public isKindOfBlock = (
  ^true
)
) : (
)
public class TensorAST expressions: es <List[ExprAST]> position: p <{Integer. Integer}> = super TensorAST expressions: es  position: p (
) (
appendDimensionsOf: e <ExprAST> to: ds <List[Integer]> ^  <List[Integer]> = (
  e isKindOfTensorAST ifTrue: [
  ds add: e expressions size.
  appendDimensionsOf: e expressions first to: ds
  ].
   ^ds
)
public dimensions = (
  ^appendDimensionsOf: self to: List new
)
public eval  ^ <Tensor> = (
  ^ Tensor dimensions: dimensions contents: (expressions flatMap: [:e <ExprAST> | e eval])
)
public hasRank ^ <Boolean> = (
   ^true
)
public rank ^ <Integer> = (
  ^dimensions size
)
) : (
)
class Cell from: l  <List[HyperStream[T def]]> = (
(* 
A Cell is a substream of a hyperstream that needs to be delivered to a function as a unit, rather than having the function map over it.  When used by a Frame representing an individual argument, the Cell houses a single stream representing an individual argument. When used in a zipped frame that consolidates all arguments of a function, the Cell holds a list of hyperstreams, each corresponding to one argument. The cell accepts and stores the stream(s) in a list for uniformity.
*)
  |
  public contents <List[HyperStream[T]]> = l.
  |
) (
) : (
public for: s <HyperStream[T def]> ^ <Instance> = (
(* Convenience factory for creating Cells for individual arguments. *)
  ^from: (List new add: s; yourself)
)
)
class SynchronouslyFusedIterator fusing: i1<Iterator[HyperStream[Cell[T def]]]> and: i2  <Iterator[HyperStream[Cell[S def]]]> = Iterator (
(*
Synchronous fusion of two iterators. Synchronously fusing two iterators means creating an iterator that hasNext if both iterator's hasNext is true, and whose next is the synchronous fusion of the next values of each iterator.   This is valid because we only fuse iterators of unbounded hyperstreams of frame cells.
*)
  |
  iterator1 <Iterator[HyperStream[Cell[T]]]> = i1.
  iterator2 <Iterator[HyperStream[Cell[S]]]> = i2.
  |
) (
public rank ^ <Integer> = (
  ^iterator1 rank max: iterator2 rank
)
public clone = (
  ^class fusing: iterator1 clone and: iterator2 clone
)
public hasNext ^ <Boolean> = (
(* A synchronously fused iterator's hasNext if both iterator's hasNext is true. *)
  ^iterator1 hasNext and: [iterator2 hasNext]
)
public next ^ <HyperStream[Cell[T | S]]> = (
  ^synchronouslyFuse: iterator1 next with: iterator2 next
)
) : (
)
class ReactivelyFusedIterator fusing: i1<Iterator[HyperStream[Cell[T def]]]> and: i2  <Iterator[HyperStream[Cell[S def]]]> = Iterator (
(*
Reactive  fusion of two iterators. Reactively fusing two iterators means creating an iterator that hasNext if either iterator's hasNext is true, and whose next is the reactive fusion of the latest available values of each iterator.  This is valid because we only fuse iterators of unbounded hyperstreams of frame cells.
*)
  |
  iterator1 <Iterator[HyperStream[Cell[T]]]> = i1.
  iterator2 <Iterator[HyperStream[Cell[S]]]> = i2.
  last1 <HyperStream[Cell[T]]>
  last2 <HyperStream[Cell[S]]>
  |
) (
public clone = (
  ^class fusing: iterator1 clone and: iterator2 clone
)
public rank ^ <Integer> = (
  ^iterator1 rank max: iterator2 rank
)
public hasNext ^ <Boolean> = (
  ^iterator1 hasNext or: [iterator2 hasNext]
)
public next ^ <HyperStream[Cell[T | S]]> = (
   iterator1 hasNext ifTrue: [last1:: iterator1 next].
   iterator2 hasNext ifTrue: [last2:: iterator2 next].
  ^reactivelyFuse: last1 with: last2
)
) : (
)
class TensorFactory = (
) (
public dimensions: ds <List[Integer]> contents: cs <List[Object]> = (
  0 = ds size ifTrue: [
    cs isEmpty ifTrue: [^HyperStream empty].
    assert: [cs size  = 1] message: 'Cannot have scalar with multiple elements'.
    ^HyperStream fromScalar: cs first.
    ].
  ^HyperStream fromList: cs dimensions: ds
)
) : (
)
class DataAST forStream: s <HyperStream> = AST position: {0. 0} (
(*
A dummy AST node representing an external input to the program. 

External inputs have no syntactic representation by definition, but since this is an AST interpreter, everything we evaluate has to be represented as an AST. Hence the dummy AST.  The argument s is the value of the external input, and evaluation simply returns it.
*)
	|
    public binding <HyperStream> = s.
	|
) (
public eval ^ <HyperStream> = (
(* Return the value this node represents. *)
  ^binding
)
) : (
)
public class ExternalFunctionBodyAST descriptor: d signature: sig  <ExternalFunctionSignature> = super ExternalFunctionBodyAST signature: sig (
  | descriptor = d. |
) (
public eval ^ <Tensor> = (
(* Handle an external call. *)
  | args  <List[Stream]> = currentActivation arguments. |
  (* Only deals with nodeJS functions. Also needs to massage arguments and result.
  *)
  #BOGUS.
  ^(ObjectMirror reflecting: (api require: descriptor moduleName)) perform: descriptor functionName with: args ifFail: [].
)
) : (
public signature: sig  <ExternalFunctionSignature> ^ <Instance> = (
(* Hack for typechecker compatibility *)
  ^descriptor: nil signature: sig
)
)
public DimensionNumberAST ^ <DimensionNumberAST class> = (
  ^super DimensionNumberAST
)
public ShapeVectorAST ^ <ShapeVectorAST class> = (
  ^super ShapeVectorAST
)
computeSpecialEvaluators ^ <Map[Symbol, [List[ExprAST] | List[Tensor]]]> = (
  | ses <Map[Symbol, [List[ExprAST] | List[Tensor]]]> = Map new. scanReduceBlock <[List[ExprAST] | List[Tensor]]>  |
  scanReduceBlock:: [:args <List[ExprAST]> | 
  List new 
    add: (Tensor dimensions: {} contents: {(programScope lookup: (args at: 1) id) at: #ast}); 
    add: (args at: 2) eval; 
    add: (args at: 3) eval;
    yourself
  ].
  ses 
  at: #fold put: scanReduceBlock; 
  at: #innerProduct put: innerProductBlock; 
  at: #outerProduct put: scanReduceBlock; 
  at: #reduce put: scanReduceBlock; 
  at: #scan put: scanReduceBlock.
  ^ses
)
currentActivation ^ <Activation> = (
   ^callStack last
)
currentProgram ^ <ProgramAST> = (
  ^super currentProgram
)
innerProductBlock = (
  ^[:args <List[ExprAST]> | 
  List new 
    add: (args at: 1) eval; 
    add: (args at: 2) eval; 
    add: (Tensor dimensions: {} contents: {(programScope lookup: (args at: 3) id) at: #ast}); 
    add: (Tensor dimensions: {} contents: {(programScope lookup: (args at: 4) id) at: #ast}); 
    yourself
  ].
)
popActivation = (
  callStack removeLast.
)
programScope ^ <Scope> = (
  ^super programScope
)
pushActivation: a <Activation> = (
  callStack add: a
)
scalar: o <Object> ^ <Stream> = (
  ^HyperStream fromScalar: o
)
cellsFor: fdims <List[Integer | UnboundedDimension]> from: arg <HyperStream[T def]>  ^ <HyperStream[Cell[T]]> = (
    (* base case: empty frame with single cell *)
    fdims isEmpty ifTrue: [^HyperStream fromScalar: (Cell for: arg)].
    (* recursively traverse first dimension of the argument, computing cells for each element *)
    ^arg asStream collect: [:e  <HyperStream[T]>  |  cellsFor: (fdims copyFrom: 2 to: fdims size) from: e]
)
fuseScalar: s1 <ScalarHyperStream[Cell[S1 def]]> withScalar: s2 <ScalarHyperStream[Cell[S2 def]]> ^ <ScalarHyperStream[Cell[S1 | S2]]> = (
(*
The fusion of two ScalarHyperStreams, s1 and s2, is a scalar hyperstream over a Cell of a flattened sequence of the contents of s1 and s2.
*)
  ^HyperStream fromScalar: (Cell from: s1 constant contents, s2 constant contents) 
)
fuseScalar: s <ScalarHyperStream[Cell[S def]]> withBounded: b <BoundedHyperStream[Cell[U def]]> ^ <BoundedHyperStream[Cell[S | U]]> = (
(*
To fuse a scalar stream, s, and a bounded one, b, (either synchronously or reactively, makes no difference), we create a new bounded hyperstream whose window consists of the pointwise fusion of s with each of b's elements.
*)
 | fusedSubstreams <List[HyperStream[Cell[{S. U}]]]> =  List new: b size. |
 1 to: b size do: [:i <Integer> |
    | be <HyperStream[Cell[U]]> = b iterator next.  | 
       fusedSubstreams add: (reactivelyFuse: s with: be)
     ]. 
  ^HyperStream fromList: fusedSubstreams dimensions: b dimensions
)
fuseBounded: b <BoundedHyperStream[Cell[U def]]> withScalar: s <ScalarHyperStream[Cell[S def]]> ^ <BoundedHyperStream[Cell[U | S]]> = (
(*
To fuse a bounded stream, b, and a scalar one, s, (either synchronously or reactively, makes no difference), we create a new bounded hyperstream whose window consists of the pointwise fusion of b's elements with s.
*)
 | fusedSubstreams <List[HyperStream[Cell[{U. S}]]]> =  List new: b size. |
 1 to: b size do: [:i <Integer> |
    | be <HyperStream[Cell[U]]> = b iterator next.  | 
       fusedSubstreams add: (reactivelyFuse: be with: s)
     ]. 
  ^HyperStream fromList: fusedSubstreams dimensions: b dimensions
)
frameArgument: arg <HyperStream[T def]> forParameter: p <ParameterAST> ^ <Frame[T]> = (
  (* unranked parameter: use entire argument as sole cell *)
  p hasRank ifFalse: [
  ^Frame dimensions: {} cells: (HyperStream fromScalar: (Cell for: arg)).
  ].
  arg rank >= p rank ifTrue: [ 
  | fdims <List[Integer | UnboundedDimension]> = arg dimensions copyFrom: 1 to: arg rank - p rank. |
    ^Frame dimensions: fdims cells: (cellsFor: fdims from: arg).
  ].
   ^Error signal: 'Rank of actual argument ' , arg printString, '(', arg rank printString, ') is less than rank of formal parameter ', p id, ' (', p rank printString, ')'.
)
reactivelyFuse: cells <HyperStream[Cell[T def]]> with: fcells <HyperStream[Cell[S def]]> ^ <Hyperstream[Cell[U | V]]> = (
     cells isKindOfScalarHyperStream ifTrue: [
        fcells isKindOfScalarHyperStream ifTrue: [^fuseScalar: cells withScalar: fcells].
        fcells isKindOfUnboundedHyperStream 
           ifTrue: [^fuseScalar: cells withUnbounded: fcells].
        ^fuseScalar: cells withBounded: fcells
     ] ifFalse: [
          cells isKindOfUnboundedHyperStream ifTrue: [
                  fcells isKindOfScalarHyperStream ifTrue: [^fuseUnbounded: cells withScalar: fcells].
                  ^reactivelyFuseUnbounded: cells with: fcells
          ].
          fcells isKindOfScalarHyperStream ifTrue: [^fuseBounded: cells withScalar: fcells].
          ^reactivelyFuseBounded: cells with: fcells  
          ]
)
synchronouslyFuseBounded: u <BoundedHyperStream[Cell[U def]]> with: v <BoundedHyperStream[Cell[V def]]> ^ <BoundedHyperStream[Cell[U | V]]> = (
(*
To synchronously fuse two bounded hyperstreams, create a new bounded hyperstream, whose window consists of the pointwise synchronous fusion of the constituent hyperstreams of their windows (whose sizes necessarily agree).
*)
 | 
 fusedSubstreams <List[HyperStream[Cell[[U | V]]]]> =  List new: u size. 
 dimStart <List[Integer | UnboundedDimension]> = List withAll: {u dimensions first}.
 dims <List[Integer | UnboundedDimension]>
 |
 1 to: u size do: [:i <Integer> |
    | ue <HyperStream[Cell[U]]> = u iterator next. ve <HyperStream[Cell[V]]> = v iterator next. | 
       fusedSubstreams add: (synchronouslyFuse: ue with: ve)
     ]. 
   dims:: fusedSubstreams first isKindOfScalarHyperStream 
      ifTrue: [dimStart] ifFalse: [dimStart, (fusedSubstreams first dimensions)].
  ^HyperStream fromList: fusedSubstreams dimensions: dims
)
reactivelyFuseBounded: u <BoundedHyperStream[Cell[U def]]> with: v <BoundedHyperStream[Cell[V def]]> ^ <BoundedHyperStream[Cell[T | S]]> = (
(*
To synchronously fuse two bounded hyperstreams, create a new bounded hyperstream, whose window consists of the pointwise reactive fusion of the constituent hyperstreams of their windows (whose sizes necessarily agree).
*)
 | 
 fusedSubstreams <List[HyperStream[Cell[[U | V]]]]> =  List new: u size. 
 dimStart <List[Integer | UnboundedDimension]> = List withAll: {u dimensions first}.
 dims <List[Integer | UnboundedDimension]>
 |

 1 to: u size do: [:i <Integer> |
    | ue <HyperStream[Cell[U]]> = u iterator next. ve <HyperStream[Cell[V]]> = v iterator next. | 
       fusedSubstreams add: (reactivelyFuse: ue with: ve)
     ].
   dims:: fusedSubstreams first isKindOfScalarHyperStream 
      ifTrue: [dimStart] ifFalse: [dimStart, (fusedSubstreams first dimensions)].
  ^HyperStream fromList: fusedSubstreams dimensions: dims
)
public UnknownDimensionAST ^ <UnknownDimensionAST class> = (
  ^super UnknownDimensionAST
)
synchronouslyFuseUnbounded: u <UnboundedHyperStream[Cell[U def]]> with: v <UnboundedHyperStream[Cell[V def]]> ^ <UnboundedHyperStream[Cell[U | V]]> = (
(*
To synchronously fuse two unbounded hyperstreams, we create a new unbounded hyperstream, whose iterator is the synchronous fusion of their iterators.
*)
(* u and v dimensions must agree *)
  ^HyperStream iteratingOver: (SynchronouslyFusedIterator fusing: u iterator and: v iterator) dimensions: u dimensions
)
fuseScalar: s <ScalarHyperStream[Cell[S def]]> withUnbounded: u <UnboundedHyperStream[Cell[U def]]> ^ <UnboundedHyperStream[Cell[S | U]]> = (
(*
To fuse a scalar stream, s, and an unbounded  one, u, (either synchronously or reactively, makes no difference), we create a new unbounded hyperstream whose iterator hasNext if u iterator hasNext, and whose next is the fusion of s and u next.
*)
  | 
  replicatedIterator <Iterator[Cell[S]]> = (HyperStream repeat: s) iterator.  
  fusedIterator <Iterator[Cell[S | U]]> = SynchronouslyFusedIterator fusing: replicatedIterator with: u iterator. 
  |
  ^HyperStream iteratingOver: fusedIterator dimensions: u dimensions
)
frameArguments: args <List[HyperStream]> of: callee <FunctionAST> ^ <List[Frame]> = (
  | argFrames <List[Frame]> = List new: args size. |
  args with: callee parameters do: [:a <HyperStream> :p <ParameterAST> |
  argFrames add: (frameArgument: a forParameter: p)
  ].
  ^argFrames
)
fuseUnbounded: u <UnboundedHyperStream[Cell[U def]]> withScalar: s <ScalarHyperStream[Cell[S def]]> ^ <UnboundedHyperStream[Cell[U | S]]> = (
(*
To fuse an unbounded stream, u,  and a scalar one, s, (either synchronously or reactively, makes no difference), we create a new unbounded hyperstream whose iterator hasNext if u iterator hasNext, and whose next is the fusion of u next and s.
*)
  | 
  replicatedIterator <Iterator[[Cell[S]]]> = (HyperStream repeat: s) iterator.
  fusedIterator <Iterator[Cell[U | S]]> = ReactivelyFusedIterator fusing: u iterator and: replicatedIterator. 
  |
  ^HyperStream iteratingOver: fusedIterator dimensions: u dimensions
)
synchronouslyFuse: cells <HyperStream[Cell[T def]]> with: fcells <HyperStream[Cell[S def]]> ^ <Hyperstream[Cell[T | S]]> = ( 
     cells isKindOfScalarHyperStream ifTrue: [
        fcells isKindOfScalarHyperStream ifTrue: [^fuseScalar: cells withScalar: fcells].
        fcells isKindOfUnboundedHyperStream 
           ifTrue: [^fuseScalar: cells withUnbounded: fcells].
        ^fuseScalar: cells withBounded: fcells
     ] ifFalse: [
          cells isKindOfUnboundedHyperStream ifTrue: [
                  fcells isKindOfScalarHyperStream ifTrue: [^fuseUnbounded: cells withScalar: fcells].
                  ^synchronouslyFuseUnbounded: cells with: fcells
          ].
          fcells isKindOfScalarHyperStream ifTrue: [^fuseBounded: cells withScalar: fcells].
          ^synchronouslyFuseBounded: cells with: fcells  
          ]
)
reactivelyFuseUnbounded: u <UnboundedHyperStream[Cell[U def]]> with: v <UnboundedHyperStream[Cell[V def]]> ^ <UnboundedHyperStream[Cell[U | V]]> = (
(*
To reactively fuse two unbounded hyperstreams, we create a new unbounded hyperstream, whose iterator is the reactive fusion of their iterators.
*)
 | dimTail <List[Integer | UnboundedDimension]> = u dimensions copyFrom: 2 to: u dimensions size. |
  ^HyperStream iteratingOver: (ReactivelyFusedIterator fusing: u iterator and: v iterator) dimensions: {HyperStream unboundedDimension}, dimTail
)
computeCall: callee <FunctionAST | ProgramAST> arguments: args <List[HyperStream]> ^  <HyperStream> = (
  |  (* frame *)
  argFrames <List[Frame]> = frameArguments: args of: callee.
  (* replicate & zip *)
  zippedFrame <Frame[List[HyperStream]]> = argFrames reduce: [:f1 <Frame[T def]> :f2 <Frame[S def]> |
  (* If we set reactivity per formal, we should test formals, not callee; if not, we should hoist test out *)
    callee isSynchronous ifTrue: [f1 synchronouslyFuse: f2] ifFalse: [f1 reactivelyFuse: f2]
    ] ifEmpty: [emptyFrame].
  (* map *)    
  resultFrame <Frame> = zippedFrame map: [:argVector <List[HyperStream]> | 
   | result  <HyperStream> | 
   pushActivation:  (Activation of: callee from: argVector visit: nil ).
   result:: callee body eval.
   popActivation.
   result.
  ].
  | 
  
  ^resultFrame asStream.  
)
fuseDims: ds1 <List[Integer | UnboundedDimension]> with: ds2  <List[Integer | UnboundedDimension]> ^ <List[Integer | UnboundedDimension]> = (
  ^super fuseDims: ds1 with: ds2
)
) : (
)
) : (
)
