Newspeak3
'Root'
class ShapeRankConcreteTypecheckerTests usingPlatform: platform parsing: parsing minitest: minitest supplier: s streams: hs = (
|
	private Stopwatch = platform kernel Stopwatch.
	private Parser = parsing Parser.
	private TestContext = minitest TestContext.
	private Map = platform collections Map.
	private HyperStream = hs HyperStream.
        private ConcreteType = Parser new asts ConcreteType.
        private unboundedDimension = Parser new asts unboundedDimension.
      supplier = s.
|
) (
public class TypecheckerTests = TestContext (
) (
class SubstitutionMock from: s to: t <TypeAST> = (
  | public typeVarMap = Map new.
    public shapeVarMap = Map new.
    public dimVarMap = Map new. |
  t getTypeVariables do: [:tv |
    (typeVarMap includesKey: tv id) ifTrue:
      [Error signal: 'please ensure output types in your tests are uniquely named'].
    typeVarMap at: tv id put: tv.
  ].
  t getShapeVariables do: [:sv |
    sv isKindOfShapeVariableAST ifTrue: [
      (shapeVarMap includesKey: sv id) ifTrue:
        [Error signal: 'please ensure output shapes in your tests are uniquely named'].
      shapeVarMap at: sv id put: sv.
    ].
    sv isKindOfDimensionVariableAST ifTrue: [
      (dimVarMap includesKey: sv id) ifTrue:
        [Error signal: 'please ensure output dimensions in your tests are uniquely named'].
      dimVarMap at: sv id put: sv.
    ].
  ].
  s getTypeVariables do: [:tv |
    typeVarMap at: tv put: (typeVarMap at: tv id).
  ].
  s getShapeVariables do: [:sv |
    sv isKindOfShapeVariableAST ifTrue: [
      shapeVarMap at: sv put: (shapeVarMap at: sv id).
    ].
    sv isKindOfDimensionVariableAST ifTrue: [
      dimVarMap at: sv put: (dimVarMap at: sv id).
    ].
  ]
) (
) : (
)
expectTypeError: blk <[]> = (
  should: blk signal: Error description: 'Type error expected'.
)
messageSelector = (
)
public testAppend = (
(*  append(a: [$d1]$T, b: [$d2]$T):[$d1 + $d2]$T *)
  | result = typecheckFileNamed: 'append'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 6.
  assert: result baseType id equals: 'Int'.
)
public testAppend2 = (
(*  append(a: [$d1]$T, b: [$d2]$T):[$d1 + $d2]$T *)
  | result = typecheckFileNamed: 'append2'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testAppend6 = (
(*  append(a: [$d1]$T, b: [$d2]$T):[$d1 + $d2]$T *)
  | result = typecheckFileNamed: 'append6'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testContains_false  = (
(* asArray(x: Int):Int *)
  | result = typecheckFileNamed: 'contains_false'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType id equals: 'Bool'.
)
public testContains_true  = (
(* asArray(x: Int):Int *)
  | result = typecheckFileNamed: 'contains_true'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType id equals: 'Bool'.
)
public testDotProduct  = (
(* dotProduct(a: [$d]Int, b: [$d]Int): Int *)
  | result = typecheckFileNamed: 'dotProduct'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testEmptyArgs = (
 expectTypeError: [typecheckFileNamed: 'empty_args'] 
)
public testExcessArgs = (
 expectTypeError: [typecheckFileNamed: 'excess_args'] 
)
public testFun = (
 expectTypeError: [typecheckFileNamed: 'fun'] 
)
public testIdentity_3 = (
  | result = typecheckFileNamed: 'identity_3'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType isKindOfDimensionNumberAST.
  assert: result baseType dimension = 3.
)
public testIff11 = (
  | result = typecheckFileNamed: 'if11'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType id equals: 'Int'.
)
public testIff21 = (
  | result = typecheckFileNamed: 'if21'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testIota = (
  | result = typecheckFileNamed: 'iota'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 6.
  assert: result baseType id equals: 'Int'.
)
public testLength = (
  | result = typecheckFileNamed: 'length'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testLet = (
  | result = typecheckFileNamed: 'let'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testLiterallInt = (
  | result = typecheckFileNamed: 'literal_int'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: [result baseType isKindOfDimensionNumberAST].
  assert: result baseType dimension equals: 23.
)
public testMatmul = (
  | result = typecheckFileNamed: 'matmul'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testMatrix = (
  | result = typecheckFileNamed: 'matrix'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testOuterProduct2 = (
  | result = typecheckFileNamed: 'outerProduct2'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 5.
  assert: (result shape dimensions at: 2) constant equals: 5.
  assert: result baseType id equals: 'Int'.
)
public testPair = (
  | result = typecheckFileNamed: 'pair'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 4.
  assert: (result shape dimensions at: 2) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testPlusExpr = (
  | result = typecheckFileNamed: 'plusExpr'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testPointwiseVector = (
  | result = typecheckFileNamed: 'pointwiseVector'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testPointwiseVectorScalar = (
  | result = typecheckFileNamed: 'pointwiseVectorScalar'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testRange = (
  | result = typecheckFileNamed: 'range'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 5.
  assert: result baseType id equals: 'Int'.
)
public testRerank2 = (
  | result = typecheckFileNamed: 'rerank2'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 1.
  assert: (result shape dimensions at: 2) constant equals: 6.
  assert: result baseType id equals: 'Int'.
)
public testRerank3 = (
  | result = typecheckFileNamed: 'rerank3'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testScalarVectorMatrix  = (
  | result = typecheckFileNamed: 'scalarVectorMatrix'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testScan = (
  | result = typecheckFileNamed: 'scan'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testShapecast = (
  | result = typecheckFileNamed: 'shapeCast'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testTwice  = (
  | result = typecheckFileNamed: 'twice'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType id equals: 'Int'.
)
public testVecMatmul  = (
  | result = typecheckFileNamed: 'vecMatmul'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testVector = (
  | result = typecheckFileNamed: 'vector'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
equals: s <TypeAST> type: t <TypeAST> ^<Boolean> = (
  (* type equality modulo distinct typevars in different typechecking passes *)
  (* we don't use = here as it is sensitive to the actual form of the type (TensorType empty shape etc.) *)
  | subst = SubstitutionMock from: s to: t.
    ss = s substitute: subst. |
  ^(ss subtypeOf: t) & (t subtypeOf: ss)
)
assertNotTyped: str1 <String> as: str2 <String> desc: d <String> = (
  assert: [(equals: (typecheckCompilationUnit: str1) type: (typecheckCompilationUnit: str2)) not]
    description: d.
)
public testStruct = (
  assertTyped: '{a: true, b: true}' as: '{b: false, a: false}'
         desc: 'struct types should ignore order'.
  (* gcs/lcs is currently buggy *)
  assert: [((typecheckCompilationUnit: '{a: 5, b: 3}') lcs:
    (typecheckCompilationUnit: '{b: 9, a: 2}')) baseType isKindOfTypeStructAST]
    description: 'struct types should subtype on value types'.
  assertNotTyped: '{a: true, b: true}' as: '{a: true}'
            desc: 'struct types should be on raw equality, not (width) subtyping'.
  assertNotTyped: '{a: true}' as: '{a: true, b: true}'
            desc: 'struct types should be on raw equality, not (width) subtyping'.
  assertTyped: '{a: 3, b: false}.b' as: 'true'
         desc: 'struct dot should index its type'.
)
public testStringLit = (
  assertTyped: '"hello"' as: '"world"' desc: 'strings should be typed'.
  assertNotTyped: '"hello"' as: '4' desc: 'string type should be distinct from int'.
  assertNotTyped: '"world"' as: 'true' desc: 'string type should be distinct from bool'.
)
public testRelOps = (
  assertTyped: '[1] < [3]' as: '[true]' desc: 'lt should have int -> int -> bool'.
  assertTyped: '[1] > [3]' as: '[true]' desc: 'gt should have int -> int -> bool'.
  assertTyped: '[1] <= [3]' as: '[true]' desc: 'leq should have int -> int -> bool'.
  assertTyped: '[1] >= [3]' as: '[true]' desc: 'geq should have int -> int -> bool'.

  assertTyped: 'true < false' as: 'true' desc: 'lt should have bool -> bool -> bool'.
  assertTyped: 'true > false' as: 'true' desc: 'gt should have bool -> bool -> bool'.
  assertTyped: 'true <= false' as: 'true' desc: 'leq should have bool -> bool -> bool'.
  assertTyped: 'true >= false' as: 'true' desc: 'geq should have bool -> bool -> bool'.

  assertTyped: '[["hi"]] < [["bye"]]' as: '[[true]]'
    desc: 'lt should have str -> str -> bool'.
  assertTyped: '[["hi"]] > [["bye"]]' as: '[[true]]'
    desc: 'gt should have str -> str -> bool'.
  assertTyped: '[["hi"]] <= [["bye"]]' as: '[[true]]'
    desc: 'leq should have str -> str -> bool'.
  assertTyped: '[["hi"]] >= [["bye"]]' as: '[[true]]'
    desc: 'geq should have str -> str -> bool'.
)
public testFloatAdd = (
  | result = typecheckCompilationUnit: '0.32 + 0.10'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType id equals: 'Float'.
)
public testMakeTensor = (
  | result = typecheckFileNamed: 'makeTensor'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) baseType constant equals: 2.
  assert: (result shape dimensions at: 2) baseType constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testGradientDescent = (
  | result = typecheckFileNamed: 'gradientDescent'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape at: 1) dimension equals: 4.
  assert: result baseType id equals: 'Int'.
)
public testNumericSubtypes = (
  assertTyped: '3+4.2' as: '0.2' desc: 'ints should be promoted to floats (1)'.
  assertTyped: '3.2+4' as: '0.2' desc: 'ints should be promoted to floats (2)'.
)
public disabled_testRerank = (
  | result = typecheckFileNamed: 'rerank'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
typecheckCompilationUnit: string <String> ^ <TensorTypeAST> = (
  ^(Parser new program parseString: string) userType
)
public testOuterProduct1 = (
  | result = typecheckFileNamed: 'outerProduct1'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 3.
  assert: (result shape dimensions at: 1) constant equals: 1.
  assert: (result shape dimensions at: 2) constant equals: 1.
  assert: (result shape dimensions at: 3) constant equals: 6.
  assert: result baseType id equals: 'Int'.
)
public testReduce = (
  | result = typecheckFileNamed: 'reduce'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testPolyReduce2 = (
  | result = typecheckFileNamed: 'polyReduce2'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testRerank = (
  | result = typecheckFileNamed: 'rerank'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testShapecast1 = (
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'shapeCast1'] 
)
public testPolyEval4 = (
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'polyEval4'] 
)
public testShapecast3 = (
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'shapeCast3'] 
)
public testShapecast4 = (
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'shapeCast4'] 
)
public testPolyEval2 = (
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'polyEval2'] 
)
public testPolyEval1 = (
  | result |
  expectTypeError: [result:: typecheckFileNamed: 'polyEval1']
)
public testOuterProduct3 = (
  | result |
  expectTypeError: [result:: typecheckFileNamed: 'outerProduct3'] 
)
public testAppend3 = (
(*  append(a: [$d1]$T, b: [$d2]$T):[$d1 + $d2]$T *)
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'append3'] 
)
public testAppend4 = (
(*  append(a: [$d1]$T, b: [$d2]$T):[$d1 + $d2]$T *)
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'append4'] 
)
public testAppend5 = (
(*  append(a: [$d1]$T, b: [$d2]$T):[$d1 + $d2]$T *)
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'append5'] 
)
public testMissingArg = (
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'missing_arg'] 
)
public testMixedTypeTensor = (
  | result |
 expectTypeError: [result:: typecheckFileNamed: 'mixedTypeTensor'] 
)
public testOuterProduct = (
  | result |
  expectTypeError: [result:: typecheckFileNamed: 'outerProduct'] 
)
public testIota3 = (
  | result = typecheckFileNamed: 'iota3'. |

  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: result baseType id equals: 'Int'.
)
public testMask = (
  | result = typecheckFileNamed: 'mask'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: [(result shape dimensions at: 1) isKindOfUnknownDimensionAST].
  assert: result baseType id equals: 'Int'.
)
public testReplicate = (
  | result = typecheckFileNamed: 'replicate'. |
  assert: result rank equals: 1.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: result baseType id equals: 'Int'.
)
public testIdentity_rec = (
  | result = typecheckFileNamed: 'identity_rec'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType dimension equals: 3.
)
public testNoReturn = (
(*  dummy(x: Int) = x; dummy(3) *)
  | result = typecheckFileNamed: 'noReturn'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType dimension equals: 3.
)
public testAsArray  = (
(* asArray(x: Int):[1]Int *)
  | result = typecheckFileNamed: 'asArray'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: result baseType dimension equals: 42.
)
public testPolyEval3 = (
  | result = typecheckFileNamed: 'polyEval3'. |
  assert: result rank = 0.
  assert: result baseType id = 'Int'.
)
public testPrimes = (
  | result = typecheckFileNamed: 'primes'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: [(result shape dimensions at: 1) isKindOfUnknownDimensionAST].
  assert: result baseType id equals: 'Int'.
)
public testFold_snd = (
(*  snd(a: $T, b: $S):$S *)
  | result = typecheckFileNamed: 'fold_snd'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType id equals: 'Int'.
)
public testFold_fst = (
(*  fst(a: $T, b: $S):$T *)
  | result = typecheckFileNamed: 'fold_fst'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType dimension equals: 2.
)
public testPolyReduce = (
  | result = typecheckFileNamed: 'polyReduce'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 3.
  assert: result baseType dimension equals: 0.
)
public testSoftmax = (
  | result = typecheckFileNamed: 'softmax'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape at: 1) dimension equals: 3.
  assert: result baseType id equals: 'Float'.
)
public testStructFn2 = (
  | result = typecheckFileNamed: 'structFn2'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape at: 1) dimension equals: 8.
  assert: result baseType id equals: 'Int'.  
)
public testStructFn3 = (
  | result = typecheckFileNamed: 'structFn3'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape at: 1) dimension equals: 3.
  assert: result baseType id equals: 'Int'.  
)
public testStructFn1 = (
  | result = typecheckFileNamed: 'structFn1'. |
  assert: result shape rank equals: 0.
  assert: result baseType dimension equals: 4.  
)
public testTimesVec = (
  | result = typecheckFileNamed: 'timesVec'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape at: 1) dimension equals: 4.
  assert: result baseType id equals: 'Int'.   
)
public testTimesVec2D = (
  | result = typecheckFileNamed: 'timesVec2D'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape at: 1) dimension equals: 2.
  assert: (result shape at: 2) dimension equals: 3.  
  assert: result baseType id equals: 'Int'.   
)
public testModel = (
  | result = typecheckFileNamed: 'model'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 3.
  assert: (result shape at: 1) dimension equals: 4.
  assert: (result shape at: 2) dimension equals: 2.
  assert: (result shape at: 3) dimension equals: 3.
  assert: result baseType id equals: 'Float'.
)
public testTrain = (
  | result = typecheckFileNamed: 'train'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 4.  
  assert: result baseType table isKindOfMap.  
  assert: (result baseType table at: #W) baseType id equals: 'Float'.
  assert: (result baseType table at: #b) baseType id equals: 'Float'.
  assert: (result baseType table at: #W) rank equals: 2.
  assert: ((result baseType table at: #W) shape dimensions at: 1) dimension equals: 3.
  assert: ((result baseType table at: #W) shape dimensions at: 2) dimension equals: 2.  
  assert: (result baseType table at: #b) rank equals: 1.
  assert: ((result baseType table at: #W) shape dimensions at: 1) dimension equals: 3.  
)
public testTrainedParams = (
  | result = typecheckFileNamed: 'trainedParams'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType table isKindOfMap.  
  assert: (result baseType table at: #W) baseType id equals: 'Float'.
  assert: (result baseType table at: #b) baseType id equals: 'Float'.
  assert: (result baseType table at: #W) rank equals: 2.
  assert: ((result baseType table at: #W) shape dimensions at: 1) dimension equals: 3.
  assert: ((result baseType table at: #W) shape dimensions at: 2) dimension equals: 2.  
  assert: (result baseType table at: #b) rank equals: 1.
  assert: ((result baseType table at: #W) shape dimensions at: 1) dimension equals: 3.  
)
public testArgmax = (
  | result = typecheckFileNamed: 'argmax'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType id equals: 'Int'.
)
public testIota2 = (
  | result = typecheckFileNamed: 'iota2'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape at: 1) dimension equals: 2.
  assert: (result shape at: 2) isKindOfUnknownDimensionAST.
  assert: result baseType id equals: 'Int'.
)
public testMalordered = (
  | result = typecheckFileNamed: 'malordered'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType id equals: 'Bool'.
)
public testWhere = (
  assertTyped: 'a where a = [5]' as: '[5]' desc: 'expected typing through where'.
  assertTyped: '[a, a] where a = [b, b] where b = [1, 2]'
           as: '[[[0, 0], [0, 1]], [[1, 0], [0, 0]]]'
         desc: 'expected typing through multiple wheres'.
)
public testWhere3 = (
  (*assertTyped: '[a, a] where a = [a, a] where a = [1, 2]'
           as: '[[[0, 0], [0, 0]], [[0, 0], [0, 0]]]'
         desc: 'expected typing through multiple wheres with shadowing'.*)
)
public testRange3 = (
  | result = typecheckFileNamed: 'range3'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 9.
  assert: result baseType id equals: 'Int'.
)
public testRange2 = (
  | result = typecheckFileNamed: 'range2'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 5.
  assert: result baseType id equals: 'Int'.
)
public testRange4 = (
  | result = typecheckFileNamed: 'range4'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 5.
  assert: result baseType id equals: 'Int'.
)
public testRange5 = (
  | result = typecheckFileNamed: 'range5'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 9.
  assert: result baseType id equals: 'Int'.
)
typecheckFileNamed: fn <String> withArguments: args <List[ConcreteType]> ^ <TensorTypeAST> = (
  ^typecheckCompilationUnit: (supplier supplyTestNamed: fn) withArguments: args
)
typecheckFileNamed: fn <String> ^ <TensorTypeAST>  = (
  ^typecheckCompilationUnit: (supplier supplyTestNamed: fn)
)
typecheckCompilationUnit: string <String> withArguments: args <List[ConcreteType]> ^ <TensorTypeAST> = (
  ^(Parser new program parseString: string) computeTypeWithArguments: args 
)
threes ^ <ConcreteType> = (
  ^ConcreteType dimensions: {unboundedDimension} baseType: 3.
)
twoToThe9th ^ <ConcreteType> = (
  ^ConcreteType dimensions: {unboundedDimension} baseType: 'Int'.
)
public testDoubleStream  = (
  | result = typecheckFileNamed: 'double_stream' withArguments: {threes}. |
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: result baseType equals: 'Int'.
)
public testDoubleStream2  = (
  | result = typecheckFileNamed: 'double_stream' withArguments: {twoToThe9th}. |
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: result baseType equals: 'Int'.
)
public testTwice_Stream  = (
  | result = typecheckFileNamed: 'twice_stream' withArguments: {threes}. |
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: result baseType equals: 'Int'.
)
public testTwice_Stream2  = (
  | result = typecheckFileNamed: 'twice_stream' withArguments: {twoToThe9th}. |
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: result baseType equals: 'Int'.
)
public testStreamContains_true2 = (
  | result = typecheckFileNamed: 'stream_contains' 
     withArguments: {HyperStream fromList: {twoToThe9th. threes} dimensions: {2. unboundedDimension}}. |
  assert: [result isKindOfConcreteType] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType equals: 'Bool'.
)
public testStreamContains_true1 = (
  | result = typecheckFileNamed: 'stream_contains' withArguments: {twoToThe9th}. |
  assert: [result isKindOfConcreteType] description: 'Tensor type expected!'.
  assert: result shape rank equals: 0.
  assert: result baseType equals: 'Bool'.
)
public testPointwiseSyncStream = (
  | 
  result = typecheckFileNamed: 'pointwiseSyncStream' withArguments: {threes. twoToThe9th}.
  |
  assert: result rank equals: 1.
  assert: [result isKindOfConcreteType] description: 'Concrete type expected!'.  
  assert: (result dimensions at: 1) isKindOfUnboundedDimension.
  assert: result baseType equals: 'Int'.
)
public testPairStreamSync1 = (
  | result = typecheckFileNamed: 'pair_stream_sync1' withArguments: {twoToThe9th}. |
  assert: [result isKindOfConcreteType] description: 'Concrete type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: (result shape dimensions at: 2) constant equals: 2.
  assert: result baseType equals: 'Num'.
)
public testPairStreamSync2 = (
  | result = typecheckFileNamed: 'pair_stream_sync2' withArguments: {threes}. |
  assert: [result isKindOfConcreteType] description: 'Concrete type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: (result shape dimensions at: 2) constant equals: 2.
  assert: result baseType equals: 'Num'.
)
public testPairStreamSync3 = (
  | result = typecheckFileNamed: 'pair_stream_sync3' withArguments: {threes. twoToThe9th}. |
  assert: [result isKindOfConcreteType] description: 'Concrete type expected!'.
  assert: result shape rank equals: 2.
  assert: (result shape dimensions at: 1) isKindOfUnknownDimensionAST.
  assert: (result shape dimensions at: 2) constant equals: 2.
  (* The program infers its result base type from its declared input base types. 
       Since the code is fully polymorphic, the base type is unconstrained,
       and so we get 'Any' regardless of the specific base types of the arguments.
  *)
  assert: result baseType equals: 'Any'.
)
public testMatVecMul = (
  | result = typecheckFileNamed: 'matVecMul'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testMatVecMulInnerProduct = (
  | result = typecheckFileNamed: 'matVecMul_inner_product'. |
  assert: [result isKindOfTensorTypeAST] description: 'Tensor type expected!'.
  assert: result shape rank equals: 1.
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: result baseType id equals: 'Int'.
)
public testMatmulRerank2  = (
  expectTypeError: [typecheckFileNamed: 'matmul_rerank2'] 
)
public testMatmulInnerProduct2  = (
  expectTypeError: [typecheckFileNamed: 'matmul_inner_product2']  
)
public testMatmulInnerProduct  = (
  | result = typecheckFileNamed: 'matmul_inner_product'. |
  assert: result shape rank equals: 2. 
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.  
)
public testMatmulRerank  = (
  | result = typecheckFileNamed: 'matmul_rerank'. |
  assert: result rank equals: 2. 
  assert: (result shape dimensions at: 1) constant equals: 2.
  assert: (result shape dimensions at: 2) constant equals: 3.
  assert: result baseType id equals: 'Int'.
)
public testBoundedStructTypes = (
  assertTyped: 'func f(x) = x; f({foo: 3})' as: '{foo: 3}' desc: 'width inference w/o bound'.
  assertTyped: 'func f(x) = x; f({foo: 3})' as: '{foo: 3}'
         desc: 'width inference with bound'.
  assertTyped: 'func f(x) = x; f({n: 3.2})' as: '{n: 1.2}'
         desc: 'depth inference with bound'.
)
public testBoundedTypes = (
  assertTyped: 'func f(x) = x.a; f({ a: 3 })' as: '3'
    desc: 'bounded types should preserve individual typing'.
  assertTyped: 'func f(x) = x.a; f({ a: 3.2 })' as: '3.2'
    desc: 'bounded types should preserve individual typing, 2'.
  expectTypeError: 'func f(x) = x; f(true)'.
  assertTyped: 'func f(x) = x; f([1.8,2.1,3.3])' as: '[2.0,3.1,0.9]'
    desc: 'bounded types should track inferred types across tensors'.
  expectTypeError: 'func f(x) = x; f([1.2, 2])'.
)
public testFloats = (
  assertTyped: '0.213' as: '23.21' desc: 'floats should be typed'.
  assertNotTyped: '0.102' as: '102' desc: 'float types should be distinct from ints'.
  assertTyped: 'func f(arg) = 3; f(0.3)'
           as: 'func f(arg) = 3; f(10)'
         desc: 'functions should accept ints or floats when they accept Nums'.
)
public testScopedTypeVariables = (
  (* fold(f: $T -> $S -> $T, acc: $T, x:[]::@R $S): @R $T*)
  assertTyped: 'func f(a, b) = a;
                fold(f, true, [1])'
           as: 'true'
         desc: 'should not get confused with differently scoped tyvars'.
  assertTyped: 'func f(a, b) = a;
                fold(f, true, [1])'
           as: 'true'
         desc: 'should not get confused with differently scoped tyvars'.
)
public testTypeBounds = (
  assertTyped: 'func f(s: [] , x:[]) = s
                let x = fold(f, [0.1, 0.3], [[1]]); x'
           as: '[0.1, 0.3]'
         desc: 'should be able to propagate constraints through folds and funcs'.
  assertTyped: 'func f(s, x: []) = s
                let x = fold(f, { foo: [0.1, 0.3] }, [[1]]); x'
           as: '{ foo: [0.1, 0.3] }'
         desc: 'should be able to propagate constraints through structs too'.
)
public testShapeDimVarInference = (
  assertTyped: 'func id1(x: []) = x; apply(id1, [2])' as: '[2]'
         desc: 'shape variables should be unified with dimension variable vectors'.
)
assertTyped: str1 <String> as: str2 <String> desc: d <String> = (
  | t1 = (Parser new program parseString: str1) userType. t2 = (Parser new program parseString: str2) userType. |
  assert: [equals: t1 type: t2]
    description: d.
)
) : (
TEST_CONTEXT = ()
)
) : (
)
