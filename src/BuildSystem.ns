Newspeak3
'Root'
class BuildSystem usingPlatform: p parser: parsing <ShapeRankParser> streams: hs <HyperStream class> ffi: swf <ShapeWebFFI> 
(* :exemplar: [
	|
	namespace
	embedder
	ide
	parsers
	grammar
	parsing
	Evaluator
    utils
    hyperstreams
	Scopes
    InterimTypechecker
	Typechecker
	interpreter
	hopscotchPlatform
	|
	
    utils:: CollectionUtils usingPlatform: platform.
    hyperstreams:: HyperStreams usingPlatform: platform.
	Scopes::
	  (ShapeRankScopes usingPlatform: platform asts: ShapeRankASTs tensorflow: Tensorflow nodeAPI: NodeAPI) Scopes.
    InterimTypechecker::
	  (ShapeRankTypechecker  usingPlatform: platform asts: Scopes collectionUtils: utils)
	     Typechecker.     
    Typechecker::
	  (ShapeRankConcreteTypechecker  usingPlatform: platform asts: InterimTypechecker collectionUtils: utils streams: hyperstreams)
	     TypeInterpreter.
    interpreter:: ShapeRankStreamInterpreter usingPlatform: platform
	                                    asts: Typechecker
                                        collectionUtils: utils
                                        streams: hyperstreams.
    Evaluator:: interpreter Evaluator.
    parsers:: CombinatorialParsing usingPlatform: platform.
    grammar:: ShapeRankGrammar usingPlatform: platform parsers: parsers.
    parsing:: ShapeRankParser usingPlatform: platform grammar: grammar asts: Evaluator collectionUtils: utils.

    BuildSystem usingPlatform: platform parser: parsing streams:  hyperstreams HyperStream ffi: (ShapeRankWebFFI usingPlatform: platform api: NodeAPI)] value *) = (
  |
  private Parser = parsing Parser.
  private HyperStream <HyperStream class> = hs.
  parser = Parser new.
  api <NodeAPI> = swf api.
  ffi <ShapeRankWebFFI FFI> = swf FFI parser: parser.
  watcher <Alien> =  ffi api require: 'chokidar'.  
  |
) (
public run = (
  | shapeRankProgram = parser program parseString: shapeRankSource. |
  shapeRankProgram evaluateWithArguments: {
    ffi newspeakFunction: #getFile: ofObject: self signature: '(filePath: String): [?] String'.
    ffi newspeakFunction: #cc:dependencies: ofObject: self signature: '(target: String, deps: [?]String, flags: String): String'.   
    ffi newspeakFunction: #link:dependencies: ofObject: self signature: '(target: String, deps: [d!][?]String, flags: String): String'.    
    }.
)
shapeRankSource2  ^ <String> = (
  ^'
  program build(getFile: (filePath: String): [?] String)
  getFile("Applications/NewspeakIDE.app/Contents/Resources/app/main.js")
 '
)
shapeRankSource ^ <String> = (
  ^'
  program build(getFile: (filePath: String): [?] String, clang: (target: String, deps: [?]String, flags: String): String, basicLink: (target: String, deps: [d!][?]String, flags: String): String)
  func cc(target: String, deps: []String, flags: String) = 
  clang(getFile(target), zip(getFile(deps)), flags)

  func link(target: String, deps: [][?]String, flags: String): [?]String =   basicLink(target, zip(deps), flags);
  
  link("myApp", [
   cc("a.c", ["b.h"], "-c"),
   cc(‘b.c’, ["b.h", "c.h"], "-c"),
   cc(‘c.c’, [‘c.h’], ‘-c’),
   cc("d.c", [], "-c"),                                     
], "") 
  '
)
public run2 = (
  | shapeRankProgram = parser program parseString: shapeRankSource2. |
  ^shapeRankProgram evaluateWithArguments: {
      HyperStream fromScalar:
       (ffi newspeakFunction: #getFile: ofObject: self signature: '(filePath: String): [?] String')
    }.
)
public getFile: path  <String> ^ <HyperStream> = (
  | stream <HyperStream> = HyperStream extensible. |
  stream iterator add: path.
 (watcher watch: path) on: 'all' do: [:filepath <String> :event <String>  :x | 
     stream iterator add: path.
     nil
     ].
  ^stream
)
) : (
)
