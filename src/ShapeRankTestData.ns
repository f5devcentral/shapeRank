Newspeak3
'Root'
class ShapeRankTestData usingPlatform: p <Platform> = (
|
private ObjectMirror = p mirrors ObjectMirror.
private mirror = ObjectMirror reflecting: self.
|

) (
public supplyTestNamed: tn <String> ^ <String> = (
  ^(mirror evaluate: 'test_', tn) result reflectee
)
test_append ^ <String> = (
^'func dummy(x: Int): Int = x;
 

append([1, 3, 4], [7, 22, 355])
'
)
test_append2 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

append([3], [4])
'
)
test_append3 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

append(3, 4)
'
)
test_append4 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

append([1, 2, 3], 4)
'
)
test_append5 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

append(1, [2, 3, 4])
'
)
test_append6 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

append([[1, 3, 4]], [[7, 22, 355]])
'
)
test_asArray ^ <String> = (
^'func asArray(x: Int): [1]Int = [x];

asArray(42)
'
)
test_contains_false ^ <String> = (
^'func dummy(x: Int): Int = x;

contains([[1, 2, 3],[7, 6, 5]], 9)
'
)
test_contains_true ^ <String> = (
^'func dummy(x: Int): Int = x;

contains([[1, 2, 3],[7, 6, 5]], 6)
'
)
test_empty_args ^ <String> = (
^'func dummy(x: Int): Int = x;
 

dummy()
'
)
test_excess_args ^ <String> = (
^'func dummy(x: Int): Int = x;
 

dummy([3, 4], [5, 6])
'
)
test_fun ^ <String> = (
^'func dummy(x: Int): Int = x;

reduce
'
)
test_identity_3 ^ <String> = (
^'func identity(x: Int):Int = x;

3
'
)
test_identity_rec ^ <String> = (
^'func identity(x: Int):Int = x;

identity(3)

'
)
test_if11 ^ <String> = (
^'func dummy(x: Int): Int = x;

if true then 4 else 5
'
)
test_if21 ^ <String> = (
^'func dummy(x: Int): Int = x;

if [true, false] then 4 else 5
'
)
test_if22 ^ <String> = (
^'func dummy(x: Int): Int = x;

if [true, false] then [3, 4] else [2, 1]
'
)
test_iota ^ <String> = (
^'func dummy(x: Int): Int = x;

iota(6)
'
)
test_iota2 ^ <String> = (
^'func dummy(x: Int): Int = x;

iota([1, 2])
'
)
test_length ^ <String> = (
^'func dummy(x: Int): Int = x;

length([[3, 2, 5],[7, 10, 6]])
'
)
test_literal_int ^ <String> = (
^'func dummy(x: Int): Int = x;
 
23
'
)
test_mask ^ <String> = (
^'func dummy(x: Int): Int = x;

mask([false, true, true], [3, 4, 7])
'
)
test_matrix ^ <String> = (
^'func dummy(x: Int): Int = x;

[[3, 2, 5],[7, 10, 6]]
'
)
test_missing_arg ^ <String> = (
^'func dummy(x: Int): Int = x;
 

append([3, 4])
'
)
test_mixedTypeTensor ^ <String> = (
^'func dummy(x: Int): Int = x;
 
[1, true]
'
)
test_outerProduct ^ <String> = (
^'func dummy(x: Int): Int = x;

outerProduct(append, iota(4), iota(2))
'
)
test_pair ^ <String> = (
^'func pair(a: $T, b: $T): [2]$T = [a, b];

pair([1, 2, 3, 4], [2, 4, 8, 16])
'
)
test_polyReduce = (
  ^'func first(x: Int, y: Int): Int = x;

reduce(first, 0, [[1, 2, 3], [4, 5, 6]])

'
)
test_polyReduce2 = (
  ^'func second(x: Int, y: Int): Int = y;

reduce(second, 0, [[1, 2, 3], [4, 5, 6]])
'
)
test_rerank2 ^ <String> = (
^'let append_rows = rerank append to 1, 1;

append_rows([[1, 2, 3]], [[4, 5, 6]])

'
)
test_rerank3 ^ <String> = (
^'let rotate_rows = rerank rotate to 1, 0;

rotate_rows([[1, 2, 3], [10, 20, 30], [100, 200, 300]], 1)

'
)
test_rotate_left0 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], 0)
'
)
test_rotate_left1 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], 1)
'
)
test_rotate_left2 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], 2)
'
)
test_rotate_left3 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], 3)
'
)
test_rotate_left4 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], 4)
'
)
test_rotate_right0 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], -0)
'
)
test_rotate_right1 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], -1)
'
)
test_rotate_right2 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], -2)
'
)
test_rotate_right3 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], -3)
'
)
test_rotate_right4 ^ <String> = (
^'func dummy(x: Int): Int = x;
 

rotate([[1, 2, 3], [10, 20, 30], [100, 200, 300]], -4)
'
)
test_shapeCast ^ <String> = (
^'func dummy(x: Int): Int = x;

shapeCast mask([false, true, true], [3, 4, 7]) to [2]
'
)
test_shapeCast2 ^ <String> = (
^'func dummy(x: Int): Int = x;

shapeCast mask([false, true, true], [3, 4, 7]) to [3]
'
)
test_shapeCast3 ^ <String> = (
^'func dummy(x: Int): Int = x;

shapeCast mask([false, true, true], [3, 4, 7]) to [2][4]
'
)
test_shapeCast4 ^ <String> = (
^'func dummy(x: Int): Int = x;

shapeCast length([[3, 2, 5],[7, 10, 6]]) to [2]
'
)
test_vector ^ <String> = (
^'func dummy(x: Int): Int = x;

[3, 2, 5]
'
)
test_iota3 ^ <String> = (
^'func dummy(x: Int): Int = x;

iota(3 + 4)
'
)
test_malordered ^ <String> = (
^'func intBool(x: Int, y: Bool): Int = x;

intBool(true, 3)
'
)
test_noReturn ^ <String> = (
^'func dummy(x: Int) = x;
 

dummy(3)
'
)
test_twice ^ <String> = (
^'func twice(x: Int):Int = 2*x;

twice(3)
'
)
test_timesVec ^ <String> = (
^'
let timesVec = rerank * to 1, 1;

timesVec([5, 6, 7, 8], [10, 20, 30, 40])
'
)
test_scan ^ <String> = (
^'func dummy(x: Int): Int = x;

scan(+, 0, [[1, 2, 3], [4, 5, 6]])

'
)
test_scalarVectorMatrix ^ <String> = (
^'func dummy(x: Int): Int = x;
[10, 20, 30] + 2 * [[1, 2, 3],[4, 5, 6], [7, 8, 9]]
'
)
test_range ^ <String> = (
^'func dummy(x: Int): Int = x;

2..6
'
)
test_polyEval3 ^ <String> = (
^'func polyEval(coefficients:[]Int, x: Int): Int = 
  reduce(+,
    0,
   coefficients * scan(*, 1, replicate(x, length(coefficients)))
    )

func replicate(x: $T, n: $n):[$n]$T = x + iota(n) - iota(n);

polyEval([1, 0, 0, 0, 3], 2)
'
)
test_polyEval2 ^ <String> = (
^'func polyEval(coefficients: [$d + 1]Int, x: Int): Int = 
  reduce(+,
    0,
    coefficients * power(x, 0..$d)
    );

polyEval([1, 0, 0, 0, 3], 2)



'
)
test_polyEval1 ^ <String> = (
^'func polyEval(coefficients: []Int, x: Int): Int = 
  reduce(+,
    0,
    coefficients * power(x, 0.. length(coefficients) - 1)
    );

polyEval([1, 0, 0, 0, 3], 2)
'
)
test_pointwiseVectorScalar ^ <String> = (
^'func pv(a: Int, b: Int): Int = a * b;

pv([1, 2, 3], 2)
'
)
test_pointwiseVector ^ <String> = (
^'func pv(a: Int, b: Int): Int = a*b;

pv([1, 2, 3], [2, 2, 2])
'
)
test_plusExpr ^ <String> = (
^'func dummy(x: Int): Int = 0;

[[1, 2, 3], [4, 5, 6]] + [[7, 8, 9], [10, 11, 12]]
'
)
test_matmul_rerank ^ <String> = (
^'func vecMatmul(v: [$d1]Int, m: [$d1][$d2]Int): [$d2]Int = fold(+, 0, v*m)

let matmul = rerank vecMatmul to 2, 2;
 

matmul([[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]])
'
)
test_outerProduct3 ^ <String> = (
^'func dummy(x: Int): Int = x;

outerProduct(2..6, 2..6, *)
'
)
test_outerProduct2 ^ <String> = (
^'func dummy(x: Int): Int = x;

outerProduct(*, 2..6, 2..6)
'
)
test_matmul2 ^ <String> = (
^'func dotProduct(a: [$d]Int, b: [$d]Int): Int = fold(+, 0, a*b)

func matmul(a:[$m][$n]Int, b:[$n][$p]Int):[$m][$p]Int =
  fold(+, 0, a*b);
 

matmul([[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]])
'
)
test_matVecMul ^ <String> = (
^'
let timesVec = rerank * to 1, 1
let reduceByRow = rerank fold to 0, 0 , 1

func matVecmul( m: [$d1][$d2]Int, v: [$d2]Int): [$d1]Int = reduceByRow(+, 0, timesVec(v, m));
 

matVecmul([[1, 2, 3, 4], [5, 6, 7, 8]], [10, 20, 30, 40])
'
)
test_matVecMul_inner_product2 ^ <String> = (
^'
let timesVec = rerank * to 1, 1
let reduceByRow = rerank fold to 0, 0 , 1

func matVecmul( m: [$d1][$d2]Int, v: [$d2]Int): [$d1]Int = reduceByRow(+, 0, timesVec(v, m))

func matmul(a: @X:: [$n] Int, b: [$n]::@Y Int): @X::@Y Int =  
  if length(shapeOf(b)) = 1 then matVecmul(a, b) else innerProduct(a, b, +, *);
 

matmul([[1, 2, 3, 4], [5, 6, 7, 8]], [10, 20, 30, 40])
'
)
test_let ^ <String> = (
^'let a = [1, 2, 3]
  let b = [4, 5, 6];
  a*b
'
)
test_dotProduct ^ <String> = (
^'func dotProduct(a: [$d]Int, b: [$d]Int): Int = reduce(+, 0, a*b);

dotProduct([[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30, 40], [50, 60, 70, 80]])
'
)
test_makeTensor ^ <String> = (
^'func dummy(x: Int): Int = x;

makeTensor(@[2, 3], [1, 2, 3, 4, 5, 6])
'
)
test_matmul ^ <String> = (
(* 
This example uses vector-matrix multiplication to define matrix multiplication.
See test_vecMatmul for an explanation of how it works.
The matrix multiply function relies on the implicit mapping of ShapeRank to invoke
vecMatmul to multiply each row (an n-vector) of the matrix a by b. Each such call
yields a p-vector; there are m such calls, one per row. ShapeRank agregates of these into
an m X p result.
*)
^'func vecMatmul(v: [$d1]Int, m: [$d1][$d2]Int): [$d2]Int = fold(+, 0, v*m)

func matmul(a:[$m][$n]Int, b:[$n][$p]Int):[$m][$p]Int =
  vecMatmul(a, b);
 

matmul([[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]])
'
)
test_vecMatmul ^ <String> = (
(*
The vector v is automatically replicated $d2 times and multiplied
pointwise with m. The call to fold then sums the columns of the resulting
matrix.
*)
^'func vecMatmul(v: [$d1]Int, m: [$d1][$d2]Int): [$d2]Int = fold(+, 0, v*m);

vecMatmul([1, 2, 3, 4], [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]])
'
)
test_matmul_rerank2 ^ <String> = (
(* 
Should fail: The vector passed to dotProduct is of length 4
but the matrix has rows of length 3
*)
^'func dotProduct(a: [$d]Int, b: [$d]Int): Int = fold(+, 0, a*b)

let vecMatmul = rerank dotProduct to 1, 2
let matmul = rerank vecMatmul to 2, 2 ;

matmul([[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]])
'
)
test_polyEval4 ^ <String> = (
(*
This isn't supposed to work. It's more of a design idea.  We'd like to 
get more precise static information, so we could verify that the call
to replicate has type [$d]Int, so scan(...) has type [$d]Int, so append(...)
has type [$d + 1] Int, so we can guarantee that multiplication has type
[$d + 1] Int. The use of a dim var as a value is magical and doesn't really
work. However, maybe something like
@shapeOf(coefficients)[1] - 1 would while giving precise types?
*)
^'func polyEval(coefficients:[$d+1]Int, x: Int): Int = 
  reduce(+,
    0,
    coefficients * append([1], scan(*, 1, replicate(x, $d))) 
    )

func replicate(x: $T, n: $n):[$n]$T = x + iota(n) - iota(n);

polyEval([1, 0, 0, 0, 3], 2)
'
)
test_gradientDescent = (
^'func model(params: { W: [$cn][$fn]Float, b: [$cn]Float }, x: [$fn]Float): [$cn]Float
     = softmax(matmul(params.W, x) + params.b)
   let initParams = { W: [[0,0],[0,0],[0,0]], b: [0,0,0] }
   let trainingSet = [
     [ {x: [0.2, 0.8], yp: [0, 1, 0]}, {x: [0.9, 0], yp: [1, 0, 0]} ],
     [ {x: [0.9, 0.9], yp: [0, 0, 1]}, {x: [0.8, 0.6], yp: [1, 0, 0]} ],
     [ {x: [0.4, 0.5], yp: [0, 1, 0]}, {x: [0.5, 0.5], yp: [0, 0, 1]} ],
     [ {x: [0.2, 0.6], yp: [0, 1, 0]}, {x: [0.4, 0.1], yp: [1, 0, 0]} ]
   ]
   func loss(params: { W: [$cn][$fn]Float, b: [$cn]Float },
             data: [$batchSize]{x: [$fn]Float, yp: [$cn]Float}): Float =
     avg(crossEntropyLoss(data.yp, model(params, data.x)))
   func train(params: { W: [$cn][$fn]Float, b: [$cn]Float },
              data: [$batchSize]{ x: [$fn]Float, yp: [$cn]Float }):
             { W: [$cn][$fn]Float, b: [$cn]Float } =
     gradientDescent(0.05, loss, params, data)
   let trainedParams = fold(train, initParams, trainingSet)
   func infer(x: [2]Float): Int = argmax(model(trainedParams, x));
   infer([[0.25, 0.65], [0.2, 0.9], [0.1, 0.1], [0.7, 0]])'
)
test_matmul_inner_product ^ <String> = (
^'
func vecMatmul(v: [$d1]Int, m: [$d1][$d2]Int): [$d2]Int = fold(+, 0, v*m)

func matmul(a: @X:: [$n] Int, b: [$n]::@Y Int): @X::@Y Int =  
  if length(shapeOf(b)) == 1 then vecMatmul(a, b) else innerProduct(a, b, +, *);
 

matmul([[1, 2, 3, 4], [5, 6, 7, 8]], [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 200, 300]])
'
)
test_matVecMul_inner_product ^ <String> = (
^'
let timesVec = rerank * to 1, 1
let reduceByRow = rerank fold to 0, 0 , 1

func matVecmul( m: [$d1][$d2]Int, v: [$d2]Int): [$d1]Int = reduceByRow(+, 0, timesVec(v, m))

func matmul(a: @X:: [$n] Int, b: [$n]::@Y Int): @X::@Y Int =  
  if length(shapeOf(b)) == 1 then matVecmul(a, b) else innerProduct(a, b, +, *);
 

matmul([[1, 2, 3, 4], [5, 6, 7, 8]], [10, 20, 30, 40])
'
)
test_primes ^ <String> = (
^'func primeHelper(r: []Int) =
  mask(not(contains(outerProduct(*, r, r), r)), r)

func allPrimesUpTo(n: $n) = primeHelper(2..n);

allPrimesUpTo(6)
'
)
test_replicate ^ <String> = (
^'func replicate(x: $T, n: $n):[$n]$T = x + iota(n) - iota(n);
 

replicate(42,  3 + 4)


'
)
test_rerank ^ <String> = (
^'let compact = rerank fold to 0, 0, 1;

compact(+, 0, [[1, 2, 3], [4, 5, 6]])

'
)
test_fold_fst = (
(* fold(f: @P$T->@Q$S->@P$T, acc: @P$T, x:[$d]::@R::@Q $S): @R::@P $T *)
^'
func fst(a: $A, b: $B): $A = a; 
fold(fst, 2, [1, 2, 3])
'
)
test_outerProduct1 ^ <String> = (
^'func dummy(x: Int): Int = x;

outerProduct(append, [iota(4)], [iota(2)])
'
)
test_identity_vector ^ <String> = (
^'func identity(x: Int):Int = x;

identity([3, 4])

'
)
test_identity_matrix ^ <String> = (
^'func identity(x: Int):Int = x;

identity([[3, 4], [5, 6], [7, 8]])

'
)
test_manual_rerank2 ^ <String> = (
^'func append_rows(a: [$d1]$T, b: [$d2]$T): [$d1 + $d2]$T = append(a, b);

append_rows([[1, 2, 3]], [[4, 5, 6]])

'
)
test_manual_rerank3 ^ <String> = (
^'func rotate_rows(x: [$d]$T, y: Int):[$d]$T  = rotate(x, y);

rotate_rows([[1, 2, 3], [10, 20, 30], [100, 200, 300]], 1)

'
)
test_program_identity_3 ^ <String> = (
^'program identity3(x: Int) func identity(x: Int):Int = x;

3
'
)
test_append_streams1 ^ <String> = (
^'program testAppendStreams1(s: [d]Int): [d + 3] Int;
 

append([1, 3, 4], s)
'
)
test_append_streams2 ^ <String> = (
^'program testAppendStreams2(s: [d]Int): [d + 3] Int;
 

append(s, [1, 3, 4])
'
)
test_append_streams3 ^ <String> = (
^'program testAppendStreams3(s1: [d1]Int, s2: [d2]Int): [d1 + d2] Int;
 

append(s1, s2)
'
)
test_reduce ^ <String> = (
^'func dummy(x: Int): Int = x;

reduce(+, 0, [[1, 2, 3], [4, 5, 6]])

'
)
test_referential_transparency = (
^'program referentialTransparency(s: []$E):[?][2] [?]
sync func pair(a: $T, b: $T): [2]$T = [a, b]
sync func foo(a: [?]$T, b: [?]$T, c: $T): [2][?]$T = pair(a, b);
foo(s, s, s)'
)
test_double_stream ^ <String> = (
^'sync program doubleStream(s:[] Int) 
func dummy(x: Int): Int = x
; s*2
'
)
test_pair_stream_sync1 ^ <String> = (
^'sync program pairStream1(s: []$E): [2]$E  sync func pair(a: $T, b: $T): [2]$T = [a, b];

pair([1, 2, 3, 4], s)
'
)
test_pair_stream_sync2 ^ <String> = (
^'sync program pairStream2(s: []$E): [2]$E  sync func pair(a: $T, b: $T): [2]$T = [a, b];

pair(s, [2, 4, 8, 16])
'
)
test_pair_stream_sync3 ^ <String> = (
^'sync program pairStream3(s1: []$E, s2: []$E): [2]$E  sync func pair(a: $T, b: $T): [2]$T = [a, b];

pair(s1, s2)
'
)
test_pointwiseSyncStream ^ <String> = (
^'sync program pointwiseStream(s1: [?] Int, s2: [?] Int): [?] Int sync func pv(a: Int, b: Int): Int = a*b;

pv(s1, s2)
'
)
test_stream_scan ^ <String> = (
^'sync program streamScan(s: []Int): Int;

scan(+, 0, s)

'
)
test_twice_stream ^ <String> = (
^'sync program twiceStream(s: []Int) sync func twice(x: Int):Int = 2*x;

twice(s)
'
)
test_stream_contains ^ <String> = (
^'sync program streamContains(s: @S Int)
func dummy(z: Int) = 3
;

contains(s, 512)
'
)
) : (
)
